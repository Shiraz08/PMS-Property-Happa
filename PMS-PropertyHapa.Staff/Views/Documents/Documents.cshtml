
@{
    ViewData["Title"] = "Documents";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-12">
                    <h3>Documents</h3>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a class="home-item" href="/Home/Index"><i data-feather="home"></i></a></li>
                        <li class="breadcrumb-item">Documents</li>
                        <li class="breadcrumb-item active">List</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid my-4">
        <div class="row">
            <!-- Column 1: Properties Table (80% on lg screens) -->
            <div class="col-xl-12 col-md-12 box-col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="right-side-header">
                            <button class="btn btn-success" id="adddocumentBtn">Add Document</button>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover text-center display" id="documentTable">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col" class="text-center tableHeaderbg">Document Title</th>
                                        <th scope="col" class="text-center tableHeaderbg">Document Description</th>
                                        <th scope="col" class="text-center tableHeaderbg">Type</th>
                                        <th scope="col" class="text-center tableHeaderbg">Document Name</th>
                                        <th scope="col" class="text-center tableHeaderbg">Created Date</th>
                                        <th scope="col" class="text-center tableHeaderbg">Modified Date</th>
                                        <th scope="col" class="text-center tableHeaderbg">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="newDocumentModal" tabindex="-1" aria-labelledby="documentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="documentModalLabel">New Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="documentForm">
                <input type="hidden" value="" id="documentId" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="documentTitle" class="form-label">Title *</label>
                        <input type="text" class="form-control" name="documentTitle" id="documentTitle" placeholder="Title" >
                    </div>
                    <div class="mb-3">
                        <label for="documentDescription" class="form-label">Description *</label>
                        <textarea class="form-control" placeholder="Description" id="documentDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="documentType" class="form-label">Type *</label>
                        <select class="form-control select2" id="documentType" name="Type">
                            <option value="" selected disabled hidden>Select Documnet Type</option>
                            <option value="Lease">Lease</option>
                            <option value="Personal">Personal</option>
                            <option value="Agreement">Agreement Form</option>
                            <option value="Task">Task Document</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="documentFile" class="form-label">Document Upload *</label>
                        <input type="file" class="form-control" id="documentFile" name="DocumentFile" accept=".pdf,.xls,.xlsx,.doc,.docx,.png,.jpg,.jpeg,.gif">
                        <img id="documentUpload" src="" alt="Document Upload" style="max-width: 100%;" class="d-none">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success" id="saveBtn">Save</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#documentTable').DataTable({
            "ajax": {
                "url": "/Documents/GetDocuments",
                "type": "GET",
                "dataSrc": ""
            },
            "columns": [
                {
                    "data": "Title",
                    "className": "text-center"
                },
                {
                    "data": "Description",
                    "className": "text-center"
                },
                {
                    "data": "Type",
                    "className": "text-center" 
                },
                {
                    "data": "DocumentName",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        const extension = data.split('.').pop().toLowerCase();
                        let documentType;
                        switch (extension) {
                            case 'png':
                            case 'jpg':
                            case 'jpeg':
                            case 'gif':
                                documentType = 'Image';
                                break;
                            case 'pdf':
                                documentType = 'PDF';
                                break;
                            case 'xls':
                            case 'xlsx':
                                documentType = 'Excel';
                                break;
                            case 'doc':
                            case 'docx':
                                documentType = 'Word';
                                break;
                            case 'ppt':
                            case 'pptx':
                                documentType = 'PowerPoint';
                                break;
                            default:
                                documentType = 'Unknown';
                                break;
                        }
                        return documentType;
                    }
                },
                {
                    "data": "CreatedDate",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        if (data) {
                            const date = new Date(data);
                            const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are 0-based
                            const day = date.getDate().toString().padStart(2, '0');
                            const year = date.getFullYear();
                            return `${month}/${day}/${year}`;
                        }
                        return '';
                    }
                },
                {
                    "data": "ModifiedDate",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        if (data) {
                            const date = new Date(data);
                            const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are 0-based
                            const day = date.getDate().toString().padStart(2, '0');
                            const year = date.getFullYear();
                            return `${month}/${day}/${year}`;
                        }
                        return '';
                    }
                },
                {
                    "className": "text-center",
                    "data": "DocumentsId",
                    "render": function (data, type, row, meta) {
                        return `
                                    <div class="dropdown-basic">
                                        <div class="dropdown">
                                            <div class="btn-group mb-0">
                                                <button class="dropbtn btn btn-success" type="button">Action <span><i class="icofont icofont-arrow-down"></i></span></button>
                                                <div class="dropdown-content">
                                                        <a class="btn btn-secondary" onclick="editDocument(${data})">
                                                        <i class="fa fa-edit"></i> Edit
                                                    </a>
                                                        <a class="btn btn-secondary" onclick="deleteDocument(${data})">
                                                        <i class="fa fa-trash"></i> Delete
                                                    </a>
                                                        <a class="btn btn-secondary" onclick="downloadDocument(${data})">
                                                            <i class="fa fa-download"></i> Download
                                                        </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `;
                    }
                }
            ]
        });


        $("#adddocumentBtn").on("click", function () {
            resetModal();
            $("#documentModalLabel").html("New Document");
            $("#newDocumentModal").modal('show');
        });

        const validationRules = {
            0: [
                { field: '#documentTitle', message: 'Please enter Title.' },
                { field: '#documentDescription', message: 'Please enter Description.' },
                { field: '#documentType', message: 'Please enter Document Type.' },
                { field: '#documentFile', message: 'Please select a Document File.', validate: (value) => value.trim() !== '' }
            ]
        };

        function validateSection(index) {
            const errors = [];
            const rules = validationRules[index];

            if (rules) {
                rules.forEach(rule => {
                    const value = $(rule.field).val();
                    if (!value || (rule.validate && !rule.validate(value))) {
                        errors.push(rule.message);
                    }
                });
            }

            return errors;
        }



        $('#documentForm').on('submit', function (event) {
            event.preventDefault();

            const sectionIndex = 0;
            const errors = validateSection(sectionIndex);

            if (errors.length > 0) {
                errors.forEach(error => toastr.error(error));
                return;
            }

            var formData = new FormData();
            formData.append("DocumentsId", Number($('#documentId').val()));
            formData.append("Title", $('#documentTitle').val());
            formData.append("Description", $('#documentDescription').val());
            formData.append("Type", $('#documentType').val());
            formData.append("Document", $('#documentFile')[0].files[0]);

            $.ajax({
                url: '@Url.Action("SaveDocument", "Documents")',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                beforeSend: function () {
                    $('#saveBtn').prop('disabled', true).text('Saving...');
                },
                success: function (response) {
                    $("#newDocumentModal").modal('hide');
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    alert('Failed to save data');
                },
                complete: function () {
                    $('#saveBtn').prop('disabled', false).text('Save');
                }
            });
        });

    });
    function resetModal() {
        $("#newDocumentModal form")[0].reset();
    }

    function deleteDocument(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You will not be able to recover this Document!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("DeleteDocument", "Documents")',
                    type: 'POST',
                    data: { id: id },
                    success: function (res) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Document deleted successfully',
                            showConfirmButton: false,
                            timer: 1500
                        });
                        location.reload()
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Something went wrong!'
                        });
                    },
                });
            }
        });
    }

    function editDocument(id) {
        $.ajax({
            url: '@Url.Action("GetDocumentById", "Documents")',
            type: 'POST',
            data: { id: id },
            success: function (res) {
                $("#documentModalLabel").html("Edit Document");
                $("#documentId").val(res.DocumentsId);
                $("#documentTitle").val(res.Title);
                $("#documentDescription").val(res.Description);
                $("#documentType").val(res.Type).trigger("change");
                $("#Document").val(res.Document);
                $("#newDocumentModal").modal('show');
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
                alert('Failed to retrieve data');
            },
        });
    }

    function downloadDocument(id) {
        $.ajax({
            url: '@Url.Action("GetDocumentById", "Documents")',
            type: 'GET',
            data: { id: id },
            success: function (data) {
                if (data && data.DocumentUrl) {
                    const link = document.createElement('a');
                    link.href = data.DocumentUrl;
                    link.download = '';  
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else {
                    alert('Document URL not found');
                }
            },
            error: function () {
                alert('An error occurred while fetching the document');
            }
        });
    }

   




</script>


