@model PMS_PropertyHapa.Models.DTO.OwnerDto
@using Microsoft.AspNetCore.Http

@{
    ViewData["Title"] = "Add/Edit Landlord";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
@*     <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script> *@

</head>
<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-12 col-sm-6">
                    <h3>@(Model?.OwnerId == null ? "Add Landlord" : "Edit Landlord")</h3>
                </div>
                <div class="col-12 col-sm-6">
                    <ol class="breadcrumb">
                        @if (Model?.OwnerId == null)
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Landlord")"><i data-feather="home"></i></a></li>
                        }
                        else
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Landlord")"><i data-feather="home"></i></a></li>
                        }


                        <li class="breadcrumb-item">Owner</li>
                        <li class="breadcrumb-item active">@(Model?.OwnerId == null ? "Add Landlord" : "Edit Landlord")</li>
                    </ol>
                </div>
            </div>
        </div>
        <div class="edit-profile">
            <div class="row">
                <form id="tenantForm" method="post" enctype="multipart/form-data">
                    <div class="d-flex">
                        <div class="col-xl-3 d-inline-block">
                            <!-- Profile picture card-->
                            <div class="card mb-4 mb-xl-0">
                                <div class="card-header">Profile Picture</div>
                                <div class="card-body text-center">
                                    <input type="hidden" value="image" name="SaveType" id="SaveType" />
                                    <img class="img-account-profile2 rounded-circle mb-2"
                                         src="@(string.IsNullOrEmpty(Model?.Picture) ? "http://bootdey.com/img/Content/avatar/avatar1.png" : $"{Model?.Picture}")"
                                         alt="" style="width: 140px;">
                                    <div class="font-italic text-muted mb-4"></div>
                                    @Html.EditorFor(model => model.PictureUrl, new { htmlAttributes = new { @id = "PictureUrl", @class = "btn btn-success", @type = "file", @accept = "image/*", @required = "required", @style = "width: 219px;" } })
                                </div>
                            </div>

                        </div>
                        <div class="col-xl-9 d-inline-block">
                            <!-- Tenant Information -->
                            <div class="card">
                                <div class="card-header pb-0">
                                    <h4 class="card-title mb-0">General Information</h4>
                                    <div class="card-options"><a class="card-options-collapse" href="#" data-bs-toggle="card-collapse"><i class="fe fe-chevron-up"></i></a><a class="card-options-remove" href="#" data-bs-toggle="card-remove"><i class="fe fe-x"></i></a></div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @* <input type="hidden" id="DocumentBase64" name="Document">
                                        <input type="hidden" id="PictureBase64" name="Picture">
                                        <input type="hidden" id="OrganizationLogoBase64" name="OrganizationLogo">
                                        <input type="hidden" id="OrganizationIconBase64" name="OrganizationIcon"> *@
                                        <input type="hidden" id="OwnerId" name="OwnerId" value="@Model?.OwnerId" />
                                        <!-- First Name -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="FirstName" class="form-label">First Name</label>
                                                <input type="text" class="form-control" id="FirstName" name="FirstName" value="@Model?.FirstName" pattern="[A-Za-z]+" required />
                                            </div>
                                        </div>
                                        <!-- Last Name -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="LastName" class="form-label">Last Name</label>
                                                <input type="text" class="form-control" id="LastName" name="LastName" value="@Model?.LastName" pattern="[A-Za-z]+" required />
                                            </div>
                                        </div>
                                        <!-- Middle Name -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="MiddleName" class="form-label">Middle Name</label>
                                                <input type="text" class="form-control" id="MiddleName" name="MiddleName" value="@Model?.MiddleName" pattern="[A-Za-z]+" required />
                                            </div>
                                        </div>
                                        <!-- Gender -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Gender" class="form-label">Gender</label>
                                                <select class="form-control select2" id="Gender" name="Gender" required>
                                                    <option value="">Select Gender</option>
                                                    <option value="Male">Male</option>
                                                    <option value="Female">Female</option>
                                                    <option value="Other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label class="form-check-label" for="toggleOrgInfo">Organization Info</label>
                                                <div class="form-check form-switch mt-2">
                                                    <input class="form-check-input" type="checkbox" id="toggleOrgInfo">
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Organization Name (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3 organization-field" style="display: none;">
                                            <div class="mb-3">
                                                <label for="OrganizationName" class="form-label">Organization Name</label>
                                                <input type="text" class="form-control" id="OrganizationName" value="@Model?.OrganizationName" name="OrganizationName">
                                            </div>
                                        </div>

                                        <!-- Organization Description (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3 organization-field" style="display: none;">
                                            <div class="mb-3">
                                                <label for="OrganizationDescription" class="form-label">Organization Description</label>
                                                <input type="text" class="form-control" id="OrganizationDescription" value="@Model?.OrganizationDescription" name="OrganizationDescription">
                                            </div>
                                        </div>

                                        <!-- Organization Icon File Upload (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3 organization-field" style="display: none;">
                                            <div class="mb-3">
                                                <label for="OrganizationIconFile" class="form-label">Organization Icon</label>
                                                <input type="file" class="form-control" id="OrganizationIconFile" name="OrganizationIconFile" accept="image/*">
                                            </div>
                                            @*    @if (!string.IsNullOrEmpty(Model?.OrganizationIcon))
                                            {
                                            var organizationIconId = Guid.NewGuid().ToString();
                                            var organizationIconBase64 = Model.OrganizationIcon.Split(",")[1];
                                            Context.Session.SetString(organizationIconId, organizationIconBase64);

                                            <p>Current Organization Icon:</p>

                                            <a href="javascript:void(0);" onclick="downloadFile('@organizationIconId')">Download</a>
                                            } *@

                                        </div>

                                        <!-- Organization Logo File Upload (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3 organization-field" style="display: none;">
                                            <div class="mb-3">
                                                <label for="OrganizationLogoFile" class="form-label">Organization Logo</label>
                                                <input type="file" class="form-control" id="OrganizationLogoFile" name="OrganizationLogoFile" accept="image/*">
                                            </div>
                                            @*   @if (!string.IsNullOrEmpty(Model?.OrganizationLogo))
                                            {
                                            var organizationLogoId = Guid.NewGuid().ToString();
                                            var organizationLogoBase64 = Model.OrganizationLogo.Split(",")[1];
                                            Context.Session.SetString(organizationLogoId, organizationLogoBase64);

                                            <p>Current Organization Logo:</p>

                                            <p></p> <a href="javascript:void(0);" onclick="downloadFile('@organizationLogoId')">Download</a>
                                            } *@

                                        </div>


                                        <!-- Website (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3 organization-field" style="display: none;">
                                            <div class="mb-3">
                                                <label for="Website" class="form-label">Website</label>
                                                <input type="url" class="form-control" id="Website" required value="@Model?.Website" name="Website" pattern="https?://.+\.com" title="Please enter a valid URL. For example, http://www.example.com">
                                            </div>
                                        </div>


                                        <!-- Date of Birth -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="DOB" class="form-label">Date of Birth</label>
                                                <input type="date" class="form-control" id="DOB" name="DOB" value="@Model?.DOB" />
                                            </div>
                                        </div>

                                        <!-- Email Address -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="EmailAddress" class="form-label">Email Address</label>
                                                <input type="email" class="form-control" id="EmailAddress" title="Please enter a valid email address." name="EmailAddress" value="@Model?.EmailAddress" required />
                                                <small class="text-success" id="addAnotherEmail" onclick="toggleEmailField()" style="cursor: pointer;">
                                                    <i class="bi bi-plus-circle"></i> Add another email  +
                                                </small>
                                            </div>
                                        </div>

                                        <!-- Additional Email Address (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3" id="additionalEmailField" style="display: @(Model?.EmailAddress2 != null ? "block" : "none")">
                                            <div class="mb-3">
                                                <label for="EmailAddress2" class="form-label">Email Address2</label>
                                                <input type="email" class="form-control" id="EmailAddress2" title="Please enter a valid email address." value="@Model?.EmailAddress2" name="EmailAddress2" required />
                                            </div>
                                        </div>

                                        <!-- Phone Number -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="PhoneNumber" class="form-label">Phone Number</label>
                                                <input type="number" class="form-control" id="PhoneNumber" name="PhoneNumber" value="@Model?.PhoneNumber" required pattern="/^(\+{0,})(\d{0,})([(]{1}\d{1,3}[)]{0,}){0,}(\s?\d+|\+\d{2,3}\s{1}\d+|\d+){1}[\s|-]?\d+([\s|-]?\d+){1,2}(\s){0,}$/gm" title="Please enter a valid phone number." />
                                                <small class="text-success" id="addAnotherPhone" onclick="togglePhoneField()" style="cursor: pointer;">
                                                    <i class="bi bi-plus-circle"></i> Add another phone  +
                                                </small>
                                            </div>
                                        </div>

                                        <!-- Additional Phone Number (Initially Hidden) -->
                                        <div class="col-sm-6 col-md-3" id="additionalPhoneField" style="display: @(Model?.PhoneNumber2 != null ? "block" : "none")">
                                            <div class="mb-3">
                                                <label for="PhoneNumber2" class="form-label">Phone Number2</label>
                                                <input type="number" class="form-control" id="PhoneNumber2" name="PhoneNumber2" value="@Model?.PhoneNumber2" required pattern="/^(\+{0,})(\d{0,})([(]{1}\d{1,3}[)]{0,}){0,}(\s?\d+|\+\d{2,3}\s{1}\d+|\d+){1}[\s|-]?\d+([\s|-]?\d+){1,2}(\s){0,}$/gm" title="Please enter a valid phone number." />
                                            </div>
                                        </div>

                                        <!-- Longitutde & Lantitude -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="longitude" class="form-label">Longitude</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="longitude" value="@Model?.Longitude" name="Longitude">
                                                    <button type="button" class="btn btn-outline-secondary" id="getLongitudeBtn">
                                                        <i class="bi bi-globe"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="latitude" class="form-label">Latitude</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="latitude" value="@Model?.Latitude" name="Latitude">
                                                    <button type="button" class="btn btn-outline-secondary" id="getLatitudeBtn">
                                                        <i class="bi bi-globe"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Fax -->
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Fax" class="form-label">Fax</label>
                                                <input type="text" class="form-control" id="Fax" name="Fax" value="@Model?.Fax" value="@Model?.Fax" required />
                                            </div>
                                        </div>
                                        
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="TaxId" class="form-label">TaxId</label>
                                                <input type="text" class="form-control" id="TaxId" name="TaxId" value="@Model?.TaxId" value="@Model?.TaxId" required />
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    <br />
                                    <b><h4>Address</h4></b>
                                    <br />
                                    <div class="row">
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Address">Address</label>
                                                <input type="text" class="form-control" id="Address" name="Address" placeholder="Enter Address" value="@Model?.Address" required maxlength="255" title="Address cannot be empty and must be shorter than 255 characters." />
                                                <div class="invalid-feedback">
                                                    Please provide a valid address.
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Address2">Unit/Ap. #</label>
                                                <input type="text" class="form-control" id="Address2" name="Address2" value="@Model?.Address2" placeholder="Enter Address2" />
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Locality">City</label>
                                                <input type="text" class="form-control" id="Locality" name="Locality" value="@Model?.Locality" placeholder="Enter City" />
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Region">State / Region</label>
                                                <input type="text" class="form-control" id="Region" name="Region" value="@Model?.Region" placeholder="Enter State/Region" />
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="PostalCode">Zip</label>
                                                <input type="number" class="form-control" id="PostalCode" name="PostalCode" value="@Model?.PostalCode" placeholder="Enter Zip Code" />
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <label for="Country">Country</label>
                                                <select class="form-control select2" id="Country" name="Country">
                                                    <option value="">Select Country</option>
                                                    <option value="Germany">Germany</option>
                                                    <option value="Canada">Canada</option>
                                                    <option value="USA">USA</option>
                                                    <option value="Australia">Australia</option>
                                                </select>
                                            </div>
                                        </div>
                                        <hr />
                                        <br />
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3" onclick="toggleEmergencyContact()" style="cursor: pointer;">
                                                <label for="PostalCode">EMERGENCY CONTACT</label>
                                                <small class="text-success"><i class="bi bi-plus-circle"></i> Add Emergency contact +</small>
                                            </div>
                                        </div>

                                        <div class="col-sm-6 col-md-3" id="emergencyContactField" style="display: @(Model?.EmergencyContactInfo != null ? "block" : "none")">
                                            <div class="mb-3">
                                                <label for="EmergencyContactInfo" class="form-label">Emergency Contact Info</label>
                                                <input type="text" class="form-control" id="EmergencyContactInfo" name="EmergencyContactInfo" value="@Model?.EmergencyContactInfo" required />
                                            </div>
                                        </div>
                                        <hr />
                                        <div class="col-sm-12 col-md-12">
                                            <div class="mb-3">
                                                <label for="DocumentFile" class="form-label">Document Upload</label>
                                                <input type="file" class="form-control" id="DocumentFile" name="DocumentFile" accept=".pdf,.xls,.xlsx,.doc,.docx" />
                                            </div>
                                        </div>
                                        @*     @if (!string.IsNullOrEmpty(Model?.Document))
                                        {
                                        var documentId = Guid.NewGuid().ToString();

                                        Context.Session.SetString(documentId, Model?.Document);

                                        <div class="mb-3">
                                        <label>Current Document:</label>
                                        <a href="javascript:void(0);" onclick="downloadFile('@documentId')">Download</a>
                                        </div>
                                        } *@
                                        <br />
                                        <hr />
                                        <br />
                                        <div class="col-sm-6 col-md-3">
                                            <div class="mb-3">
                                                <button type="button" id="saveButton" class="btn btn-success">@(Model?.OwnerId == null ? "Add" : "Edit") Owner</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@* <div class="modal fade" id="propertyManagerModal" tabindex="-1" aria-labelledby="propertyManagerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="propertyManagerModalLabel">Property Manager</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Does this landlord want to be a property manager?</p>
                <div class="mb-3">
                    <label for="managerPassword" class="form-label">Enter Password for Property Manager:</label>
                    <input type="password" class="form-control" id="managerPassword" name="managerPassword">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="saveButton2" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-primary" id="confirmPropertyManager">Yes</button>
            </div>
        </div>
    </div>
</div> *@

<script>
    const saveButton = document.getElementById('saveButton');
    // const confirmPropertyManagerBtn = document.getElementById('confirmPropertyManager');
    // const noPropertyManagerBtn = document.getElementById('saveButton2');


    if (saveButton) {
        saveButton.addEventListener('click', function (event) {
            event.preventDefault();
            const OwnerID = Number(document.getElementById('OwnerId') ? document.getElementById('OwnerId').value : '0');
            checkValidationsAndSubmit();
            // if (!OwnerID || OwnerID <= 0) {
            //     debugger;
            //     $('#propertyManagerModal').modal('show');
            // } else {
            //     checkValidationsAndSubmit();
            // }
        });
    }

    document.getElementById('getLongitudeBtn').addEventListener('click', function () {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                document.getElementById('longitude').value = position.coords.longitude;
            }, function (error) {
                alert('Error fetching location: ' + error.message);
            });
        } else {
            alert('Geolocation is not supported by this browser.');
        }
    });

    document.getElementById('getLatitudeBtn').addEventListener('click', function () {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                document.getElementById('latitude').value = position.coords.latitude;
            }, function (error) {
                alert('Error fetching location: ' + error.message);
            });
        } else {
            alert('Geolocation is not supported by this browser.');
        }
    });
    // noPropertyManagerBtn.addEventListener('click', function () {
    //     $('#propertyManagerModal').modal('hide');
    //     submitTenantForm();
    // });


    // confirmPropertyManagerBtn.addEventListener('click', async function () {
    //     $('#propertyManagerModal').modal('hide');
    //     const firstName = document.getElementById('FirstName').value;
    //     const lastName = document.getElementById('LastName').value;
    //     const email = document.getElementById('EmailAddress').value;
    //     const password = document.getElementById('managerPassword').value;

    //     if (password === "") {
    //         alert("Please enter a password for the property manager.");
    //         return;
    //     }

    //     const role = 'Property Manager';
    //     await submitRegistration(firstName, lastName, email, password, role);
    // });



    document.addEventListener('DOMContentLoaded', function () {
        const OwnerID = Number('@Model?.OwnerId');


        const toggleCheckbox = document.getElementById('toggleOrgInfo');
        toggleCheckbox.addEventListener('change', function () {
            const orgFields = document.querySelectorAll('.organization-field');
            orgFields.forEach(field => {
                field.style.display = this.checked ? 'block' : 'none';
            });
        });


        window.toggleEmergencyContact = function () {
            var emergencyContactField = document.getElementById("emergencyContactField");
            emergencyContactField.style.display = emergencyContactField.style.display === "none" ? "block" : "none";
        };

        window.togglePhoneField = function () {
            var additionalPhoneField = document.getElementById("additionalPhoneField");
            additionalPhoneField.style.display = additionalPhoneField.style.display === "none" ? "block" : "none";
        };

        window.toggleEmailField = function () {
            var additionalEmailField = document.getElementById("additionalEmailField");
            additionalEmailField.style.display = additionalEmailField.style.display === "none" ? "block" : "none";
        };



        // toastr.options = {
        //     "closeButton": false,
        //     "debug": false,
        //     "newestOnTop": false,
        //     "progressBar": true,
        //     "positionClass": "toast-top-right",
        //     "preventDuplicates": false,
        //     "onclick": null,
        //     "showDuration": "300",
        //     "hideDuration": "1000",
        //     "timeOut": "5000",
        //     "extendedTimeOut": "1000",
        //     "showEasing": "swing",
        //     "hideEasing": "linear",
        //     "showMethod": "fadeIn",
        //     "hideMethod": "fadeOut"
        // };





        // const saveButton = document.getElementById('saveButton');
        // if (saveButton) {
        //     saveButton.addEventListener('click', function (event) {
        //         console.log("2222")
        //         event.preventDefault();
        //         const OwnerID = Number('@Model?.OwnerId');
        //         if (!OwnerID || OwnerID <= 0) {
        //             $('#propertyManagerModal').modal('show');
        //         } else {
        //             checkValidationsAndSubmit();
        //         }
        //     });
        // }

        // if (saveButton2) {
        //     saveButton2.addEventListener('click', function (event) {
        //         event.preventDefault();
        //         $('#propertyManagerModal').modal('hide');
        //         checkValidationsAndSubmit();
        //     });
        // }


        const organizationName = '@Model?.OrganizationName';
        const organizationDescription = '@Model?.OrganizationDescription';
        const organizationIcon = '@Model?.OrganizationIcon';
        const organizationLogo = '@Model?.OrganizationLogo';
        const toggleOrgInfo = document.getElementById('toggleOrgInfo');
        const organizationFields = document.querySelectorAll('.organization-field');

        // Check if any of the organization fields have a value
        const hasOrganizationInfo = organizationName || organizationDescription || organizationIcon || organizationLogo;

        // Set the initial state of the toggle button and organization fields
        if (hasOrganizationInfo) {
            toggleOrgInfo.checked = true;
            organizationFields.forEach(field => field.style.display = 'block');
        }

        // Add event listener to toggle button
        toggleOrgInfo.addEventListener('change', function () {
            if (toggleOrgInfo.checked) {
                organizationFields.forEach(field => field.style.display = 'block');
            } else {
                organizationFields.forEach(field => field.style.display = 'none');
            }
        });

    });

    function validateEmail(email) {
        var re = /\S+@@\S+\.\S+/;
        return re.test(email);
    }

    function validatePhoneNumber(phoneNumber) {
        const pattern = /^(\+{0,})(\d{0,})([(]{1}\d{1,3}[)]{0,}){0,}(\s?\d+|\+\d{2,3}\s{1}\d+|\d+){1}[\s|-]?\d+([\s|-]?\d+){1,2}(\s){0,}$/gm;
        return pattern.test(phoneNumber);
    }



    function validateFirstName(FirstName) {
        return FirstName.trim().length > 0;
    }

    function validateLastName(LastName) {

        return LastName.trim().length > 0;
    }

    function validateUnit(Unit) {

        return Unit.trim().length > 0;
    }

    function validateRegion(Region) {
        return Region.trim().length > 0;
    }

    function validatePostalCode(PostalCode) {
        return PostalCode.trim().length > 0;
    }
    function validateAddress(address) {
        return address.trim().length > 0;
    }

    function showError(message) {

        toastr.error(message);
    }

    function validateEmai2valid(emailAddress2) {
        if (emailAddress2.trim().length > 0) {
            var re = /\S+@@\S+\.\S+/;
            return re.test(emailAddress2);
        }
        else {
            return true;
        }
    }

    function validateWebsite(website) {
        if (website.trim().length > 0) {
            var re = /^https?:\/\/[^\s$.?#].[^\s]*$/;
            return re.test(website);
        }
        else {
            return true;
        }
    }

    function validateField(field, validatorFunc, errorMessage) {
        if (!validatorFunc(field.value)) {
            showError(errorMessage);
            return false;
        } else {
            return true;
        }
    }

    // Collect input elements
    const emailAddress = document.getElementById('EmailAddress');
    const OrganizationName = document.getElementById('OrganizationName');
    const emailAddress2 = document.getElementById('EmailAddress2');
    const phoneNumber = document.getElementById('PhoneNumber');
    const phoneNumber2 = document.getElementById('PhoneNumber2');
    const longitude = document.getElementById('longitude');
    const latitude = document.getElementById('latitude');
    const website = document.getElementById('Website');
    const address = document.getElementById('Address');
    const FirstName = document.getElementById('FirstName');
    const LastName = document.getElementById('LastName');
    const Unit = document.getElementById('Address2');
    const Region = document.getElementById('Region');
    const PostalCode = document.getElementById('PostalCode');

    function checkValidationsAndSubmit() {
        const isEmailAddressValid = validateField(emailAddress, validateEmail, 'Please enter a valid email address.');
        const isPhoneNumberValid = validateField(phoneNumber, validatePhoneNumber, 'Please enter a valid phone number.');
        const isWebsiteValid = validateField(website, validateWebsite, 'Please enter a valid website URL.');
        const isAddressValid = validateField(address, validateAddress, 'Address cannot be empty.');
        const isEmail2Valid = validateField(emailAddress2, validateEmai2valid, 'Email address2 cannot be empty.');
        const isFirstNameValid = validateField(FirstName, validateFirstName, 'FirstName cannot be empty.');
        const isLastNameValid = validateField(LastName, validateLastName, 'LastName cannot be empty.');
        const isUnitValid = validateField(Unit, validateUnit, 'Unit cannot be empty.');
        const isRegionValid = validateField(Region, validateRegion, 'Region cannot be empty.');
        const isPostalCodeValid = validateField(PostalCode, validatePostalCode, 'PostalCode cannot be empty.');
        if (isEmailAddressValid && isPhoneNumberValid && isWebsiteValid && isAddressValid && isEmail2Valid && isFirstNameValid && isLastNameValid && isUnitValid && isRegionValid && isPostalCodeValid) {
            submitTenantForm();
        } else {
            console.error("Validation errors present. Cannot submit form.");
        }
    }

 


    async function submitTenantForm(event) {
        // const fileInputs = {
        //     'DocumentFile': 'DocumentBase64',
        //     'PictureUrl': 'PictureBase64',
        //     'OrganizationLogoFile': 'OrganizationLogoBase64',
        //     'OrganizationIconFile': 'OrganizationIconBase64'
        // };

        // for (const [inputId, outputId] of Object.entries(fileInputs)) {
        //     const inputFile = document.getElementById(inputId);
        //     if (inputFile && inputFile.files.length > 0) {
        //         document.getElementById(outputId).value = await convertFileToBase64(inputFile.files[0]);
        //     }
        // }

        


        const formElement = document.getElementById('tenantForm');
        var ajaxUrl = $('#OwnerId').val() ? '/Landlord/Update' : '/Landlord/Create';
        const formData = new FormData(formElement);
        //Object.keys(fileInputs).forEach(key => formData.delete(key));


               const pictureInput = document.getElementById('PictureUrl');
               if (pictureInput && pictureInput.files.length > 0) {
                   formData.append('PictureUrl', pictureInput.files[0]);
               }


               const documentInput = document.getElementById('DocumentFile');
               if (documentInput && documentInput.files.length > 0) {
                   formData.append('DocumentUrl', documentInput.files[0]);
               }


               const orgnizationIconInput = document.getElementById('OrganizationIconFile');
               if (orgnizationIconInput && orgnizationIconInput.files.length > 0) {
                   formData.append('OrganizationIconFile', orgnizationIconInput.files[0]);
               }


               const orgnizationLogoInput = document.getElementById('OrganizationLogoFile');
               if (orgnizationLogoInput && orgnizationLogoInput.files.length > 0) {
                   formData.append('OrganizationLogoFile', orgnizationLogoInput.files[0]);
               }

        try {
            var userId = localStorage.getItem('userId');
            formData.append('AppTId', userId);
            const response = await fetch(ajaxUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (response.ok) {
                const result = await response.json();
                console.log(result);
                toastr.success('Landlord save successful');
                window.location.href = '/Landlord/Index';
            } else {
                console.error('Server responded with non-OK status');
                toastr.error('Operation failed. Server responded with an error.');
            }
        } catch (error) {
            console.error('Error submitting form:', error);
            toastr.error('Operation failed. Network error or server is not responding.');
        }
    }

    // function convertFileToBase64(file) {
    //     return new Promise((resolve, reject) => {
    //         const reader = new FileReader();
    //         reader.readAsDataURL(file);
    //         reader.onload = () => resolve(reader.result.split(',')[1]);
    //         reader.onerror = error => reject(error);
    //     });
    // }

    document.addEventListener('DOMContentLoaded', function () {
        const pictureInput = document.getElementById('PictureUrl');
        const profileImage = document.querySelector('.img-account-profile2');

        pictureInput.addEventListener('change', function (event) {
            if (event.target.files && event.target.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    profileImage.src = e.target.result;
                };

                reader.readAsDataURL(event.target.files[0]);
            }
        });
    });



    document.addEventListener('DOMContentLoaded', function () {
        var gender = '@Model?.Gender';
        if (gender) {
            document.getElementById("Gender").value = gender;
        }
    });



    document.addEventListener('DOMContentLoaded', function () {
        var country = '@Model?.Country';
        if (country) {
            document.getElementById("Country").value = country;
        }

    });


    function downloadFile(id) {
        window.location.href = '/Landlord/Download?id=' + id;
    }

    // async function submitRegistration(firstName, lastName, email, password, role) {
    //     const formDataJsonString = JSON.stringify({
    //         Name: `${firstName} ${lastName}`,
    //         Email: email,
    //         Password: password,
    //         UserName: email,
    //         Role: role
    //     });

    //     try {
    //         const response = await fetch('/Landlord/Register', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                 'Accept': 'application/json'
    //             },
    //             body: formDataJsonString
    //         });

    //         if (response.ok) {
    //             const jsonResponse = await response.json();
    //             console.log(jsonResponse);
    //             Swal.fire('Registered Successfully', '', 'success');
    //             window.location.href = '/Auth/Login';
    //         } else {
    //             throw new Error('Something went wrong with the registration process.');
    //         }
    //     } catch (error) {
    //         console.error('Error:', error);
    //         Swal.fire('Registration Failed', 'Please try again!', 'error');
    //     }
    // }

    // function checkValidationsAndSubmit() {

    // }

</script>