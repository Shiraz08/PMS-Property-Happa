@using PMS_PropertyHapa.Models.DTO;
@using System.Linq
@model LeaseDto
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var isEditMode = Model?.LeaseId > 0;
    if (isEditMode)
        ViewData["Title"] = "Edit Lease";

    else
        ViewData["Title"] = "Add Lease";

}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<style>

    .tenant-card {
        width: 10rem; /* Adjust width as needed */
        height: 10rem; /* Adjust height as needed */
        margin: 0.5rem; /* Adjust margin as needed */
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        border: 1px solid #ccc; /* Example border */
        border-radius: 5px; /* Example border radius */
        background-color: #f9f9f9; /* Example background color */
    }

    .lime-underline {
        height: 4px;
        background-color: black;
        width: 100%;
        margin-top: 20px;
        margin-bottom: 20px;
    }


    .thick-black-underline {
        height: 2px;
        background-color: black;
        width: 100%;
        margin: 20px 0;
    }

    #step2 .row {
        flex-wrap: nowrap;
    }

    #step2 .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
    }


    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
    }

    .small-square-card-container {
        margin: auto;
        flex: 0 0 18%;
        max-width: 18%;
        padding: 0 5px;
    }

    .small-square-card,
    .property-subtype-card {
        position: relative;
        width: 100%;
        overflow: hidden;
        border-radius: 5px;
        margin-top: 5px;
        font-size: 0.8rem;
    }

        .small-square-card::before,
        .property-subtype-card::before {
            content: '';
            display: block;
            padding-top: 100%;
        }

        .small-square-card .card-body,
        .property-subtype-card .card-body {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
        }

        .small-square-card i,
        .property-subtype-card i {
            font-size: 1rem;
        }

    .selected {
        border: 3px solid #007bff;
        background-color: #e9ecef;
    }

    @@media (max-width: 768px) {
        .small-square-card-container {
            flex: 0 0 100%;
            max-width: 100%;
            padding: 0 5px;
            margin-bottom: 20px;
        }

        .row {
            gap: 5px;
        }

        .small-square-card,
        .property-subtype-card {
            margin-top: 10px;
            font-size: 0.9rem;
        }

        .f1-steps {
            flex-direction: column;
        }

        .f1-step-icon {
            font-size: 1rem;
        }

        .card-body {
            padding: 10px;
        }

        .form-navigation,
        .modal-footer {
            flex-direction: column-reverse;
        }

        .btn-next,
        .btn-previous,
        .closebutton,
        #saveOwner {
            width: 100%;
            margin-top: 10px;
        }

        .modal-dialog {
            margin: 20px;
        }

        .modal-content {
            padding: 10px;
        }

        @@media (max-width: 768px) {
            .row {
                justify-content: center;
            }

            @@media (max-width: 768px) and (min-width: 576px) {
                .row {
                    justify-content: space-between;
                }
            }

            @@media (max-width: 576px) {
                .row {
                    justify-content: center;
                }
            }
        }
    }



    @@media (max-width: 768px) {
        .f1-progress {
            display: none;
        }

        .small-square-card-container, .row {
            flex: 0 0 100%;
            max-width: 100%;
            padding: 0 15px;
            margin-bottom: 20px;
        }

        .row {
            gap: 5px;
        }

        .small-square-card, .property-subtype-card {
            margin-top: 10px;
            font-size: 0.9rem;
        }

        .form-navigation, .modal-footer {
            flex-direction: column-reverse;
        }

        .btn-next, .btn-previous, .closebutton, #saveOwner {
            width: 100%;
            margin-top: 10px;
        }

        .modal-dialog {
            margin: 20px;
        }

        .modal-content {
            padding: 10px;
        }
    }

</style>
<!-- Page Sidebar Ends-->
<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row align-items-center justify-content-between">
                <!-- Adjusted for alignment and distribution -->
                <div class="col-auto">
                    <!-- col-auto adjusts the width to its content -->
                    @if (Model?.LeaseId > 0)
                    {
                        <h3>Update New Lease</h3>
                    }
                    else
                    {
                        <h3>Add New Lease</h3>

                    }
                </div>
                <div class="col-auto">
                    <!-- col-auto adjusts the width to its content -->
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <!-- mb-0 removes the bottom margin -->
                            <li class="breadcrumb-item">
                                <a href="Index">
                                    <i data-feather="home"></i>
                                </a>
                            </li>
                            @if (Model?.LeaseId > 0)
                            {
                                <li class="breadcrumb-item">Lease</li>
                                <li class="breadcrumb-item active" aria-current="page">Update</li>

                            }
                            else
                            {
                                <li class="breadcrumb-item">Lease</li>
                                <li class="breadcrumb-item active" aria-current="page">Create</li>

                            }
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>


    <!-- Container-fluid starts-->
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header pb-0">
                    </div>
                    <div class="card-body">
                        <form class="f1" method="post" id="multiStepForm">
                            <div class="f1-steps" style="display: flex; justify-content: space-between;">
                                <div class="f1-progress" style="position: absolute; width: 100%; bottom: 0;">
                                    <div class="f1-progress-line" id="progressLine">
                                        <div class="f1-progress-indicator" style="width: 0%; background-color: green; height: 100%;"></div>
                                    </div>

                                </div>
                                <div class="f1-step active" id="stepIndicator1" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>1</i></div>
                                    <p>Overview</p>
                                </div>
                                <div class="f1-step active" id="stepIndicator2" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>2</i></div>
                                    <p>Tenants</p>
                                </div>
                                <div class="f1-step active" id="stepIndicator3" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>3</i></div>
                                    <p>Rent</p>
                                </div>
                                <div class="f1-step active" id="stepIndicator4" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>4</i></div>
                                    <p>Deposit</p>
                                </div>
                                <div class="f1-step active" id="stepIndicator5" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>5</i></div>
                                    <p>Late Fees</p>
                                </div>
                                <div class="f1-step" id="stepIndicator6" style="flex: 1; text-align: center;">
                                    <div class="f1-step-icon"><i>6</i></div>
                                    <p>Status</p>
                                </div>
                            </div>
                            <fieldset id="step1" class="step-section active">
                                <div class="container">
                                    <h3 class="text-center my-4">New Lease</h3>

                                    <div class="d-flex flex-column align-items-center">
                                        <div class="col-md-6 mb-3 @(isEditMode ? "d-none" : "")">
                                            <label for="propertyDropdown">Choose Property:</label>
                                            <select id="propertyDropdown" name="propertyDropdown" class="form-select">
                                                <option value="">Select Property</option>
                                            </select>
                                        </div>

                                        <div class="col-md-6 mb-3 @(isEditMode ? "d-none" : "")">
                                            <label for="unitDropdown">Choose Units:</label>
                                            <select id="unitDropdown" name="unitDropdown" class="form-select">
                                                <option value="">Select Unit</option>
                                            </select>
                                        </div>

                                        <div class="col-md-6 mb-3 @(isEditMode ? "" : "d-none")">
                                            <label for="selectedPropertyDisplay">Selected Property:</label>
                                            <input type="text" id="selectedPropertyDisplay" class="form-control" disabled>
                                        </div>

                                        <div class="col-md-6 mb-3 @(isEditMode ? "" : "d-none")">
                                            <label for="selectedUnitDisplay">Selected Unit:</label>
                                            <input type="text" id="selectedUnitDisplay" class="form-control" disabled>
                                        </div>

                                        <div class="thick-black-underline w-100 my-3"></div>

                                        <h4 class="text-center my-3">Lease Terms</h4>
                                        <div class="d-flex flex-wrap justify-content-center">
                                            <!-- Fixed Term Card -->
                                            <div class="card m-2" style="width: 10rem; height: 10rem;" id="fixedTermCard">
                                                <div class="card-body d-flex justify-content-center align-items-center">
                                                    <h5 class="card-title text-center">Fixed Term</h5>
                                                </div>
                                            </div>
                                            <!-- Month-to-Month Card -->
                                            <div class="card m-2" style="width: 10rem; height: 10rem;" id="monthToMonthCard">
                                                <div class="card-body d-flex justify-content-center align-items-center">
                                                    <h5 class="card-title text-center">Month-to-Month</h5>
                                                </div>
                                            </div>
                                            <input type="hidden" id="leaseId" value="@Model?.LeaseId" />
                                            <input type="hidden" id="hiddenTenantId" name="TenantId" value="@Model?.TenantId">


                                        </div>


                                        <div class="row">
                                            <div class="d-flex justify-content-between align-items-center w-100 my-3">
                                                <div class="form-group w-40 pr-1">
                                                    <label for="startDate">Start Date</label>
                                                    <input type="date" id="startDate" class="form-control" value="@(isEditMode ? Model?.StartDate.ToString("yyyy-MM-dd") : "" )">
                                                </div>

                                                <div class="form-group w-40 pl-1">
                                                    <label for="endDate">End Date</label>
                                                    <input type="date" id="endDate" class="form-control" value="@(isEditMode ? Model?.EndDate.ToString("yyyy-MM-dd") : "" )">
                                                </div>
                                            </div>
                                        </div>


                                        <div class="custom-control custom-switch my-3">
                                            <input type="checkbox" class="custom-control-input" id="customSwitch1" value="@Model?.IsMonthToMonth">
                                            <label class="custom-control-label" for="customSwitch1">Roll over to month to month at the end of the term</label>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>


                            <fieldset id="step2" class="step-section">
                                <div class="container my-4">
                                    <button type="button" class="btn btn-success mb-3" id="openAddTenantModal">Add Tenant</button>
                                    <table class="table table-striped" id="tenantList">
                                        <thead>
                                            <tr>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                                <th>Email</th>
                                                <th>Phone Number</th>
                                                <th>Select</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Tenants will be populated here -->
                                        </tbody>
                                    </table>
                                    <div id="tenantsContainer" class="row mt-3">
                                        <!-- Selected tenant's data will be displayed here -->
                                    </div>
                                    <table class="table table-bordered" id="selectedTenant">
                                        <thead>
                                            <tr>
                                                <th>Selected Tenant</th>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                                <th>Email</th>
                                                <th>Phone Number</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Selected tenant will be shown here -->
                                        </tbody>
                                    </table>
                                </div>
                            </fieldset>




                            <fieldset id="step3" class="step-section">
                                <h2 class="text-center mb-5">Rent Charges</h2>
                                <div class="container charge-section">
                                    <div class="text-center">
                                        <hr class="my-4 mb-2 mt-2" style="width: 100%; border-top: 2px solid #000;" />

                                        <p>When do you want to start charging rent?</p>
                                        <input type="date" class="form-control w-25 d-inline-block mb-3" id="firstRentDate"
                                               value="@Model?.RentCharges?.FirstOrDefault()?.RentDate.ToString("yyyy-MM-dd")">

                                        <p>How often do you charge rent?</p>
                                        <select class="form-control w-25 d-inline-block mb-3" id="rentFrequency">
                                            <option value="" disabled selected>Please select a value</option>
                                            <option value="daily">Daily</option>
                                            <option value="weekly">Weekly</option>
                                            <option value="monthly" selected>Monthly</option>
                                        </select>

                                        <p>What are your rent charges?</p>
                                        <div id="rentChargesContainer">
                                            <!-- Existing rent charge entry will be cloned from here -->
                                        </div>
                                        <button type="button" class="btn btn-success" id="addAnotherCharge">+</button>
                                    </div>
                                </div>
                            </fieldset>


                            <fieldset id="step4" class="step-section">
                                <h4 class="text-center my-3">Security Funds</h4>
                                <p class="text-center my-3">Will you be holding a security deposit on this lease?</p>
                                <div class="d-flex flex-wrap justify-content-center">
                                    <!-- Yes Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="yesSecurityFund">
                                        <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                            <i class="fas fa-check fa-2x"></i>
                                            <h5 class="card-title text-center">Yes</h5>
                                        </div>
                                    </div>
                                    <!-- No Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="noSecurityFund">
                                        <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                            <i class="fas fa-times fa-2x"></i>
                                            <h5 class="card-title text-center">No</h5>
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex flex-wrap justify-content-center">
                                    <div id="additionalDataSection" style="display: none;">
                                        <div class="row justify-content-center">
                                            <div class="col-sm-12 text-center">
                                                <p>Tell us more about the security deposits you are holding</p>
                                            </div>
                                        </div>
                                        <div id="securityDepositsContainer">
                                        </div>
                                        <div class="text-left my-3">
                                            <div class="row">
                                                <div class="col-12 d-flex justify-content-start ml-3">
                                                    <button type="button" class="btn btn-success" id="addSecurityDeposit">+</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>


                            <div id="step5" class="step-section">
                                <h4 class="text-center my-3">Late Fees</h4>
                                <p class="text-center my-3">Do you charge late fees for late rent?</p>
                                <div class="d-flex flex-wrap justify-content-center">
                                    <!-- Yes Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="yesLateFees">
                                        <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                            <i class="fas fa-check fa-2x"></i>
                                            <h5 class="card-title text-center">Yes</h5>
                                        </div>
                                    </div>
                                    <!-- No Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="noLateFees">
                                        <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                            <i class="fas fa-times fa-2x"></i>
                                            <h5 class="card-title text-center">No</h5>
                                        </div>
                                    </div>
                                </div>
                                <div id="lateFeesOptions" class="mt-4" style="display: none;">
                                    <div class="container">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="lateFeePolicy" id="usePropertyPolicy" value="usePropertyPolicy"
                                                    @(Model?.LateFeesPolicy == "true" ? "checked" : "")>
                                                    <label class="form-check-label" for="usePropertyPolicy">
                                                        Use property late fees policy
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="lateFeePolicy" id="specifyPolicy" value="specifyPolicy"
                                                    @(Model?.LateFeesPolicy == "false" ? "checked" : "")>
                                                    <label class="form-check-label" for="specifyPolicy">
                                                        Specify late fees policy for this lease
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="specifyPolicyFields" style="display: none;" class="mb-4">

                                        <div id="lateFeePolicyInfo" class="mt-4 mb-4" style="display: none;">
                                            <div class="alert alert-warning" role="alert">
                                                When late fees are applicable, they are enforced to encourage timely payments and maintain financial discipline among tenants. The specific policy details including the fee amount, grace periods, and frequency of charges should be clearly outlined in the lease agreement to ensure transparency and compliance.
                                            </div>

                                            <div class="container fee-charge-section">
                                                <div class="text-center">
                                                    <hr class="my-4 mb-2 mt-2" style="width: 100%; border-top: 2px solid #000;" />

                                                    <p>When do you want to start charging fees?</p>
                                                    <input type="date" class="form-control w-25 d-inline-block mb-3" id="firstFeeDate"
                                                           value="@Model?.FeeCharges?.FirstOrDefault()?.FeeDate.ToString("yyyy-MM-dd")">

                                                    <p>How often do you charge fees?</p>
                                                    <select class="form-control w-25 d-inline-block mb-3" id="feeFrequency">
                                                        <option value="" disabled selected>Please select a value</option>
                                                        <option value="one-time">One-Time</option>
                                                        <option value="monthly">Monthly</option>
                                                    </select>

                                                    <p>What are your fee charges?</p>
                                                    <div id="feeChargesContainer">
                                                        <!-- Existing fee charge entries will be cloned from here -->
                                                    </div>
                                                    <button type="button" class="btn btn-success" id="addAnotherFee">+</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                            </div>




                            <fieldset id="step6" class="step-section">
                                <h4 class="text-center my-3">Define Your Lease</h4>
                                <p class="text-center my-3">Is the Lease Signed?</p>
                                <div class="d-flex flex-wrap justify-content-center">
                                    <!-- Signed Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="Signed">
                                        <div class="card-body d-flex justify-content-center align-items-center flex-column">
                                            <i class="fas fa-signature fa-2x"></i>
                                            <h5 class="card-title text-center">Signed</h5>
                                        </div>
                                    </div>
                                    <!-- Not Signed Card -->
                                    <div class="card m-2" style="width: 10rem; height: 10rem; cursor:pointer;" id="UnSigned">
                                        <div class="card-body d-flex justify-content-center align-items-center flex-column">
                                            <i class="fas fa-times fa-2x"></i>
                                            <h5 class="card-title text-center">Not Signed</h5>
                                        </div>
                                    </div>
                                </div>
                                <!-- Image Upload (Initially Hidden) -->
                                <div id="signatureUploadSection" style="display:none;" class="text-center mt-4">
                                    <p class="text-center">Upload Signed Document:</p>
                                    <input type="file" id="signatureImageUpload" accept="image/*">
                                </div>
                                <div id="signaturePadSection" style="display:none;" class="text-center mt-4">
                                    <p>Sign Below:</p>
                                    <canvas id="signatureCanvas" width="400" height="200" style="border:1px solid #ccc;"></canvas>
                                    <button type="button" id="clearSignature" class="btn btn-danger mt-2">Clear</button>
                                </div>
                                <input type="hidden" id="SignatureImagePath">
                            </fieldset>




                            <!-- Hidden inputs for AssetDTO -->
                            <input type="hidden" name="SelectedPropertyType" id="SelectedPropertyType">
                            <input type="hidden" name="SelectedSubtype" id="SelectedSubtype">
                            <input type="hidden" name="SelectedBankAccountOption" id="SelectedBankAccountOption">
                            <input type="hidden" name="SelectedReserveFundsOption" id="SelectedReserveFundsOption">
                            <input type="hidden" name="SelectedOwnershipOption" id="SelectedOwnershipOption">
                            <input type="hidden" id="existingSignatureImagePath" value="@Model?.SignatureImagePath">
                            <!-- Hidden inputs for owner details -->
                            <input type="hidden" name="OwnerName" id="OwnerName">
                            <input type="hidden" name="OwnerCompanyName" id="OwnerCompanyName">
                            <input type="hidden" name="OwnerAddress" id="OwnerAddress">
                            <input type="hidden" name="OwnerStreet" id="OwnerStreet">
                            <input type="hidden" name="OwnerZipcode" id="OwnerZipcode">
                            <input type="hidden" name="OwnerCity" id="OwnerCity">
                            <input type="hidden" name="OwnerCountry" id="OwnerCountry">
                            <input type="hidden" id="selectedTenantId" name="selectedTenantId" value="">
                            <div id="propertyData" data-selected-property="@Model?.SelectedProperty" data-selected-unit="@Model?.SelectedUnit" hidden></div>



                            <div class="form-navigation" style="text-align: right;">
                                <button type="button" class="btn btn-danger btn-previous" style="display:none;">Previous</button>
                                <button type="button" id="submitForm" class="btn btn-success btn-next">Next</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
        </div>
    </div>
    <!-- Container-fluid Ends-->
</div>


<div id="addOwnerModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Owner</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="ownerForm">
                    <div class="form-group">
                        <label for="ownerName">Owner Name</label>
                        <input type="text" class="form-control" id="ownerName" placeholder="Enter owner name">
                    </div>
                    <div class="form-group">
                        <label for="ownerCompanyName">Owner Company Name</label>
                        <input type="text" class="form-control" id="ownerCompanyName" placeholder="Enter company name">
                    </div>
                    <div class="form-group">
                        <label for="ownerAddress">Owner Address</label>
                        <input type="text" class="form-control" id="ownerAddress" placeholder="Enter address">
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="ownerStreet">Street</label>
                            <input type="text" class="form-control" id="ownerStreet" placeholder="Enter street">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="ownerZipcode">Zip Code</label>
                            <input type="text" class="form-control" id="ownerZipcode" placeholder="Enter zipcode">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="ownerCity">City</label>
                            <input type="text" class="form-control" id="ownerCity" placeholder="Enter city">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="ownerCountry">Country</label>
                            <input type="text" class="form-control" id="ownerCountry" placeholder="Enter country">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary closebutton" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveOwner">Save</button>
            </div>
        </div>
    </div>
</div>


<!-- Add Tenant Modal -->
<div id="addNewTenantModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="addNewTenantModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNewTenantModalLabel">Add New Tenant</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addTenantForm">
                    <!-- Essential Tenant Fields -->
                    <div class="form-group">
                        <label for="tenantFirstName">First Name</label>
                        <input type="text" class="form-control" id="tenantFirstName" name="Tenant.FirstName" placeholder="Enter first name">
                    </div>
                    <div class="form-group">
                        <label for="tenantLastName">Last Name</label>
                        <input type="text" class="form-control" id="tenantLastName" name="Tenant.LastName" placeholder="Enter last name">
                    </div>
                    <div class="form-group">
                        <label for="tenantPhoneNumber">Phone Number</label>
                        <input type="tel" class="form-control" id="tenantPhoneNumber" name="Tenant.PhoneNumber" placeholder="Enter phone number">
                    </div>
                    <div class="form-group">
                        <label for="tenantEmailAddress">Email Address</label>
                        <input type="email" class="form-control" id="tenantEmailAddress" name="Tenant.EmailAddress" placeholder="Enter email">
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveNewTenant">Save Tenant</button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/signature_pad/1.5.3/signature_pad.min.js"></script>
<script>

    var rentCharges = @Html.Raw(Json.Serialize(Model?.RentCharges)) || [];
    var securityDeposits = @Html.Raw(Json.Serialize(Model?.SecurityDeposits)) || [];
    var globalTenantId = @Html.Raw(Model?.TenantId > 0 ? Model?.TenantId.ToString() : "null");
    var userId = localStorage.getItem('userId');
    var isEditMode = $('#leaseId').val() && $('#leaseId').val() > 0;

    var AddTenantId;

    $(document).ready(function () {
        var propertyData = $('#propertyData');
        var selectedPropertyId = propertyData.data('selected-property');
        var selectedUnitId = propertyData.data('selected-unit');

        var hasPropertyUnit = selectedPropertyId && selectedUnitId; // Determine edit mode based on existing selections

        var userId = localStorage.getItem('userId');
        if (!userId) {
            console.error("User ID is not available. Please ensure the user is logged in.");
            return;
        }

        populateProperties(userId, selectedPropertyId);

        $('#propertyDropdown').change(function () {
            var propertyId = $(this).val();
            populateUnits(propertyId, null); // No pre-selected unit when changing properties
        });

        if (hasPropertyUnit) {
            displaySelectedPropertyAndUnit(selectedPropertyId, selectedUnitId); // Display selected in disabled fields
            populateUnits(selectedPropertyId, null); // Ensure unit dropdown is populated without pre-selection
        }


        // Determine if you are in edit mode based on the existence of security deposits
        var hasSecurityDeposits = securityDeposits.length > 0;

        // Initial setup based on whether security deposits exist
        if (hasSecurityDeposits) {
            $('#yesSecurityFund').addClass('selected');
            $('#additionalDataSection').show();
        } else {
            $('#noSecurityFund').addClass('selected');
            $('#additionalDataSection').hide();
        }

        // Populate existing security deposits if any

        // Event handlers for the Yes/No buttons
        $('#yesSecurityFund, #noSecurityFund').on('click', function () {
            $('#yesSecurityFund, #noSecurityFund').removeClass('selected');
            $(this).addClass('selected');
            var displaySection = $(this).is('#yesSecurityFund') ? 'slideDown' : 'slideUp';
            $('#additionalDataSection')[displaySection]();
        });

        populateSecurityDeposits();
        populateRentCharges();



        var currentStep = 1;
        var maxSteps = 6;
        updateStepVisibility(currentStep);
        updateProgressBar(currentStep);

        const stepValidations = [
            {
                step: 1,
                validate: function () {
                    if (!isEditMode){
                        return ($('#propertyDropdown').val() && $('#unitDropdown').val() &&
                            ($('#fixedTermCard').hasClass('selected') || $('#monthToMonthCard').hasClass('selected')) &&
                            $('#startDate').val() && $('#endDate').val());
                    }else{
                        return true;
                    }
                },
                message: 'Please complete all fields in the Overview section.'
            },
            {
                step: 2,
                validate: function () {
                    return ($('#hiddenTenantId').val() || $('#tenantList .tenant-row input:checked').length > 0)
                        && $("#selectedTenantId").val() > 0;
                        // && localStorage.getItem('selectedTenantId') || $('#selectedTenantId').val();;
                },
                message: 'Please add at least one tenant. and select atleast one'
            },
            {
                step: 3,
                validate: function () {
                    var isValidDate = $('#firstRentDate').val() !== '';
                    var isValidFrequency = $('#rentFrequency').val() !== null && $('#rentFrequency').val() !== '';

                    var isValidCharges = false;
                    $('.rent-charge-entry').each(function () {
                        var type = $(this).find('.charge-type').val() !== '';
                        var description = $(this).find('.charge-description').val() !== '';
                        var amount = $(this).find('.charge-amount').val() !== '';

                        if (type && description && amount) {
                            isValidCharges = true;
                            return false;
                        }
                    });

                    return isValidDate && isValidFrequency && isValidCharges;
                },
                message: 'Please specify the first rent date, rent frequency, and at least one rent charge detail with all fields filled.'
            },
            {
                step: 4,
                validate: function () {
                    var isNoSecurityDepositSelected = $('#noSecurityFund').hasClass('selected');
                    if (isNoSecurityDepositSelected) {
                        return true;
                    }

                    var hasDescription = $('#securityDepositsContainer .security-deposit-entry').find('input[name*="Description"]').filter(function () { return this.value; }).length > 0;
                    var hasAmount = $('#securityDepositsContainer .security-deposit-entry').find('input[name*="Amount"]').filter(function () { return this.value; }).length > 0;

                    return hasDescription && hasAmount;
                },
                message: 'Please provide details for at least one security deposit.'
            },
            {
                step: 5,
                validate: function () {
                    return !$('#yesLateFees').hasClass('selected') || $('input[name="lateFeePolicy"]:checked').val();
                },
                message: 'Please specify the late fees policy.'
            },
            {
                step: 6,
                validate: function () {
                    return $('#Signed').hasClass('selected') || $('#UnSigned').hasClass('selected');
                },
                message: 'Please specify if the lease is signed.'
            }
        ];

        function validateCurrentStep(step) {
            let validation = stepValidations.find(v => v.step === step);
            if (validation && !validation.validate()) {
                Toast.fire({
                    icon: 'error',
                    title: validation.message
                });
                return false;
            }
            return true;
        }

        $('.btn-next').on('click', function () {
            // Validate current step before moving to the next
            if (validateCurrentStep(currentStep)) {
                if (currentStep < maxSteps) {
                    // Move to next step if not the last step
                    currentStep++;
                    updateStepVisibility(currentStep);
                    updateProgressBar(currentStep);
                } else {
                    submitLeaseForm();
                }
            }
        });

        $('.btn-previous').on('click', function () {
            if (currentStep > 1) {
                currentStep--;
                updateStepVisibility(currentStep);
                updateProgressBar(currentStep);
            }
        });

        function updateStepVisibility(step) {
            $('.step-section').hide().eq(step - 1).show();
            $('.f1-step').removeClass('active').eq(step - 1).addClass('active');
            $('.btn-previous').toggle(step !== 1);
            $('#submitForm').text(step === maxSteps ? 'Submit' : 'Next');
        }

        function updateProgressBar(step) {
            var progressPercentage = (step / maxSteps) * 100;
            $('#progressLine .f1-progress-indicator').css('width', progressPercentage + '%');
        }

        var isFixedTerm = '@Model?.IsFixedTerm' ? '@Model?.IsFixedTerm'.toLowerCase() === 'true' : null;
        if (isFixedTerm) {
            $('#fixedTermCard').addClass('selected');
        } else {
            $('#monthToMonthCard').addClass('selected');
        }

        var tenants = [{
            TenantId: "@Model?.TenantId", // Adjust based on actual data
            FirstName: "@Model?.Tenant?.FirstName", // Adjust these fields based on your actual model
            LastName: "@Model?.Tenant?.LastName",
            PhoneNumber: "@Model?.Tenant?.PhoneNumber",
            EmailAddress: "@Model?.Tenant?.EmailAddress"
        }];


        // Only attempt to display tenants if in edit mode
        if (isEditMode && tenants && tenants.length > 0) {
            tenants.forEach(function (tenant) {
                updateSelectedTenantDetails(true);
            });


            updateSelectedTenantDetails(true);
        } else {

            updateSelectedTenantDetails(false);
        }

        $('#yesSecurityFund').click(function () {
            $(this).addClass('selected');
            $('#noSecurityFund').removeClass('selected');
            $('#additionalDataSection').show();
        });

        // Click event handler for the "No" card to hide the security deposits section
        $('#noSecurityFund').click(function () {
            $(this).addClass('selected');
            $('#yesSecurityFund').removeClass('selected');
            $('#additionalDataSection').hide();
        });

        // Click event for Fixed Term card
        $('#fixedTermCard').on('click', function () {

            $(this).toggleClass('selected');

            $('#monthToMonthCard').removeClass('selected');
        });


        $('#monthToMonthCard').on('click', function () {

            $(this).toggleClass('selected');

            $('#fixedTermCard').removeClass('selected');
        });


        // Function to initialize the DataTable

        $('#addTenantCard').on('click', function () {

            $('#addNewTenantModal').modal('show');
        });


        $('#yesSecurityFund, #noSecurityFund').on('click', function () {
            // Remove 'selected' class from both cards
            $('#yesSecurityFund, #noSecurityFund').removeClass('selected');
            // Add 'selected' class to clicked card
            $(this).addClass('selected');

            // Toggle additional data section based on selection
            if ($(this).attr('id') === 'yesSecurityFund') {
                $('#additionalDataSection').slideDown();
            } else {
                $('#additionalDataSection').slideUp();
            }
        });


        // Optionally, handle removal of deposit details
        $(document).on('click', '.btn-remove-deposit', function () {
            $(this).closest('.deposit-detail').remove();
        });



        function updateRemoveButtonVisibility() {
            if ($('.deposit-detail').length > 1) {
                $('.deposit-detail .btn-remove-row').show();
            } else {
                $('.deposit-detail .btn-remove-row').hide();
            }
        }

        $('#addDepositDetail').on('click', function (e) {
            e.preventDefault();
            var newRow = $('.deposit-detail:last').clone(true);
            newRow.find('input').val('');
            newRow.find('select').val('');
            $('.deposit-details-container').append(newRow);
            $('<div class="lime-underline"></div>').insertBefore(newRow);
            updateRemoveButtonVisibility();
        });

        $('.deposit-details-container').on('click', '.btn-remove-row', function (e) {
            e.preventDefault();
            $(this).closest('.deposit-detail').prev('.lime-underline').remove();
            $(this).closest('.deposit-detail').remove();
            updateRemoveButtonVisibility();
        });

        updateRemoveButtonVisibility();



        $('#yesLateFees').on('click', function () {
            $(this).addClass('selected');
            $('#noLateFees').removeClass('selected');
            $('#lateFeesOptions').show();
        });

        // Card click event for "No" selection
        $('#noLateFees').on('click', function () {
            $(this).addClass('selected');
            $('#yesLateFees').removeClass('selected');
            $('#lateFeesOptions').hide();
            $('#specifyPolicyFields').hide();
        });

        $('input[type="radio"][name="lateFeePolicy"]').on('change', function () {
            if ($('#specifyPolicy').is(':checked')) {
                $('#specifyPolicyFields').show();
            } else {
                $('#specifyPolicyFields').hide();
            }
        });



        // Initialize the signature pad
        var signaturePad = new SignaturePad(document.getElementById('signatureCanvas'));


        // Check edit mode to decide on selection states
        if (isEditMode) {
            // Implement your logic for edit mode here, if needed
            // For example, selecting a specific card based on data
        } else {

            $('.card').removeClass('selected');
        }

        // Clear button functionality for the signature pad
        $('#clearSignature').on('click', function () {
            if (signaturePad) {
                signaturePad.clear();
            }
        });

        $('#Signed, #UnSigned').click(function () {
            $('.signature-option').hide();
            if ($(this).attr('id') === 'Signed') {
                $('#signatureUploadSection').show();
            } else {
                $('#signaturePadSection').show();
            }
        });


        // $('#submitForm').click(function (e) {
        //     e.preventDefault();
        //     //submitLeaseForm();
        // });


        // function submitLeaseForm() {
        //     var formData = new FormData(document.getElementById('multiStepForm'));


        //     var signatureOption = $('#Signed').hasClass('selected') ? 'Signed' : 'UnSigned';


        //     var isSigned = (signatureOption === 'Signed' && $('#signatureImageUpload')[0].files.length > 0) ||
        //         (signatureOption === 'UnSigned' && !signaturePad.isEmpty());
        //     formData.append('IsSigned', isSigned ? 'true' : 'false');

        //     if (signatureOption === 'Signed' && $('#signatureImageUpload')[0].files.length > 0) {
        //         var file = $('#signatureImageUpload')[0].files[0];
        //         fileToBase64(file, function (base64String) {
        //             formData.append('SignatureData', base64String);

        //         });
        //     }

        //     else if (signatureOption === 'UnSigned' && !signaturePad.isEmpty()) {
        //         var signatureData = signaturePad.toDataURL();
        //         formData.append('SignatureData', signatureData);

        //     } else {

        //     }
        // }

        function convertFileToBase64(file, callback) {
            var reader = new FileReader();
            reader.onload = function (e) {
                callback(e.target.result);
            };
            reader.readAsDataURL(file);
        }

        function appendAdditionalFields(formData) {
            // Append logic for additional form data as needed
            formData.append('IsSigned', $('#Signed').hasClass('selected') ? 'true' : 'false');
            // Add other fields as necessary
        }



        // Call this function when the page loads to handle edit cases
        //var isEditMode = $('#hiddenTenantId').val() !== ''; // Determine if in edit mode
        //initializeUIBasedOnMode(isEditMode);

        $('#yesLateFees, #noLateFees').on('click', function () {
            // Hide the info box initially
            $('#lateFeePolicyInfo').hide();

            // Remove 'selected' class from both cards
            $('#yesLateFees, #noLateFees').removeClass('selected');

            // Add 'selected' class to clicked card
            $(this).addClass('selected');

            // Show the info box if "Yes" is selected
            if ($(this).attr('id') === 'yesLateFees') {
                $('#lateFeePolicyInfo').show();
            }
        });


        // Set the selected option for the "Choose Property" dropdown
        var selectedProperty = $('#propertyDropdown').data('selected-property');
        if (selectedProperty) {
            $('#propertyDropdown').val(selectedProperty);
        }

        // Set the selected option for the "Choose Units" dropdown
        var selectedUnit = $('#unitDropdown').data('selected-property');
        if (selectedUnit) {
            $('#unitDropdown').val(selectedUnit);
        }

        if (isEditMode) {
            populateFeeCharges();  // Call this function if you are in edit mode
        }


        var userId = localStorage.getItem('userId');

        var isEditHasTenant = $('#hiddenTenantId').val() && $('#hiddenTenantId').val() > 0;

        var tenantIdToPreselect = isEditHasTenant ? $('#hiddenTenantId').val() : null;
        loadTenants(tenantIdToPreselect);

        $('#openAddTenantModal').on('click', function () {
            $('#addNewTenantModal').modal('show');
        });

        $('#saveNewTenant').click(function () {
            var formData = new FormData(document.getElementById('addTenantForm'));
            formData.append("Tenant.AppTid", localStorage.getItem('userId'));
            $.ajax({
                url: '/Tenant/CreateTenantData',
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function (response) {
                    if (response.success) {
                        $('#addNewTenantModal').modal('hide');
                        loadTenants(); // Refresh tenant list
                    } else {
                        alert('Failed to save tenant: ' + response.message);
                    }
                },
                error: function () {
                    alert('Error creating tenant');
                }
            });
        });

        var isEditHasLease = '@Model?.LeaseId' > 0;
        if (isEditHasLease) {
            populateProperties(userId);
            populateUnits('@Model?.SelectedProperty');
        } else {
            populateProperties(userId);
            $('#propertyDropdown').change(function () {
                populateUnits($(this).val());
            });
        }


        if (isEditHasLease) {

            var applyLateFees = '@Model?.LateFeesPolicy' === 'true';
            if (applyLateFees) {
                $('#yesLateFees').click();

                // Now decide which policy is used
                var specifyPolicy = '@Model?.LateFeesPolicy' === 'true';
                if (specifyPolicy) {
                    $('#specifyPolicy').prop('checked', true);
                    $('#specifyPolicyFields').show();
                } else {
                    $('#usePropertyPolicy').prop('checked', true);
                }
            } else {
                $('#noLateFees').click();
            }

            populateFeeCharges();
        }
    });

    function displaySelectedPropertyAndUnit(selectedPropertyId, selectedUnitId) {
        // Display the selected property and unit IDs directly in the disabled fields
        $('#selectedPropertyDisplay').val(selectedPropertyId).prop('disabled', true);
        $('#selectedUnitDisplay').val(selectedUnitId).prop('disabled', true);
    }

    function populateProperties(userId, selectedPropertyId) {
        $.ajax({
            url: '/Lease/ByUser',
            method: 'GET',
            data: { userId: userId },
            success: function (properties) {
                var $propertyDropdown = $('#propertyDropdown');
                $propertyDropdown.empty().append('<option value="">Select Property</option>');
                properties.forEach(function (property) {
                    var option = `<option value="${property.AssetId}">${property.SelectedPropertyType}</option>`;
                    $propertyDropdown.append(option);
                });
            },
            error: function (error) {
                console.error('Error fetching properties:', error.responseText || 'Unknown error');
            }
        });
    }

    function populateUnits(propertyId, selectedUnitId) {
        $.ajax({
            url: '/Lease/ByProperty',
            method: 'GET',
            data: { propertyId: propertyId },
            success: function (units) {
                var $unitDropdown = $('#unitDropdown');
                $unitDropdown.empty().append('<option value="">Select Unit</option>');
                units.forEach(function (unit) {
                    var option = `<option value="${unit.UnitId}">${unit.UnitName}</option>`;
                    $unitDropdown.append(option);
                });
            },
            error: function (error) {
                console.error('Error fetching units:', error.responseText || 'Unknown error');
            }
        });
    }


    function populateRentCharges() {
        $("#rentChargesContainer").html("");
        rentCharges.forEach(function (charge, index) {
            addRentChargeEntry(charge.Amount, charge.Description, charge.RentDate, charge.RentPeriod, index);
        });
    }

    function addRentChargeEntry(amount, description, rentDate, rentPeriod, index) {
        const formattedRentDate = new Date(rentDate).toISOString().split('T')[0];
        const entryHtml = `
                                                    <div class="rent-charge-entry rent-charge-entry-inline d-flex flex-row align-items-end mb-5" data-index="${index}">
                                                        <div class="col">
                                                            <input type="text" class="form-control" name="RentCharges[${index}].Description" placeholder="Description" value="${description}">
                                                        </div>
                                                        <div class="col">
                                                            <input type="number" class="form-control" name="RentCharges[${index}].Amount" placeholder="Amount" value="${amount}">
                                                        </div>
                                                        <div class="col">
                                                             <input type="date" class="form-control rent-date" name="RentCharges[${index}].RentDate" value="${formattedRentDate}">
                                                        </div>
                                                        <div class="col">
                                                            <select class="form-control" name="RentCharges[${index}].RentPeriod">
                                                                <option value="daily" ${rentPeriod === 'daily' ? 'selected' : ''}>Daily</option>
                                                                <option value="weekly" ${rentPeriod === 'weekly' ? 'selected' : ''}>Weekly</option>
                                                                <option value="monthly" ${rentPeriod === 'monthly' ? 'selected' : ''}>Monthly</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-auto">
                                                            <button type="button" class="btn btn-danger remove-charge" onclick="removeChargeEntry(this)">x</button>
                                                        </div>
                                                    </div>
                                                `;

        // Appending the new entry to the 'rentChargesContainer'
        $("#rentChargesContainer").append(entryHtml);
    }


    function removeChargeEntry(button) {
        // Removes the closest '.rent-charge-entry' parent of the button that triggered the event
        $(button).closest('.rent-charge-entry').remove();
    }


    $('#securityDepositsContainer').on('click', '.remove-deposit', function () {
        $(this).closest('.security-deposit-entry').remove();
    });

    function populateSecurityDeposits() {
        $("#securityDepositsContainer").html(""); // Clear existing entries
        securityDeposits.forEach(function (deposit, index) {
            addSecurityDepositEntry(deposit.Description, deposit.Amount, index);
        });
    }

    function addSecurityDepositEntry(description = "", amount = "", index = null) {
        index = index === null ? $("#securityDepositsContainer .security-deposit-entry").length : index;
        const entryHTML = `
                                                    <div class="security-deposit-entry row">
                                                        <div class="col-sm">
                                                            <input type="text" class="form-control" name="SecurityDeposits[${index}].Description" value="${description}" placeholder="Description">
                                                        </div>
                                                        <div class="col-sm">
                                                            <input type="number" class="form-control" name="SecurityDeposits[${index}].Amount" value="${amount}" placeholder="Amount">
                                                        </div>
                                                        <div class="col-sm-auto">
                                                            <button type="button" class="btn btn-danger remove-deposit">Remove</button>
                                                        </div>
                                                    </div>`;
        $('#securityDepositsContainer').append(entryHTML);
    }


    let securityDepositIndex = 0;


    $('#addSecurityDeposit').on('click', function () {
        addSecurityDepositEntry();
    });

    var signaturePad = new SignaturePad(document.getElementById('signatureCanvas'));

    $('#Signed, #UnSigned').on('click', function () {
        // Remove 'selected' class from both options
        $('#Signed, #UnSigned').removeClass('selected');

        // Add 'selected' class to the clicked option
        $(this).addClass('selected');

        // Hide both sections initially
        $('#signatureUploadSection, #signaturePadSection').hide();

        // Show the relevant section based on the selection
        if ($(this).attr('id') === 'Signed') {
            $('#signatureUploadSection').fadeIn();
        } else {
            $('#signaturePadSection').fadeIn();
        }
    });

    $('#UnSigned').on('click', function () {
        if (signaturePad) {
            signaturePad.clear();
            signaturePad = new SignaturePad(document.getElementById('signatureCanvas'));
        }
    });






    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });


    function updateTenant(tenantId) {
        window.location.href = `/Tenant/AddTenant?tenantId=${tenantId}`;
    }



    let rentChargeIndex = 0;

    document.getElementById('addAnotherCharge').addEventListener('click', function () {
        let index = $('#rentChargesContainer .rent-charge-entry').length; // Determine the next index
        const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format
        const newEntryHtml = `
                                                    <div class="rent-charge-entry row gx-2 gy-2">
                                                <div class="col-3">
                                                    <input type="text" class="form-control mb-2 mb-md-0" name="RentCharges[${index}].Description" placeholder="Description">
                                                </div>
                                                <div class="col-2">
                                                    <input type="number" class="form-control mb-2 mb-md-0" name="RentCharges[${index}].Amount" placeholder="Amount">
                                                </div>
                                                <div class="col-3">
                                                    <input type="date" class="form-control mb-2 mb-md-0" name="RentCharges[${index}].RentDate" value="${today}">
                                                </div>
                                                <div class="col-3">
                                                    <select class="form-control mb-2 mb-md-0" name="RentCharges[${index}].RentPeriod">
                                                        <option value="daily">Daily</option>
                                                        <option value="weekly">Weekly</option>
                                                        <option value="monthly">Monthly</option>
                                                    </select>
                                                </div>
                                                <div class="col-2 d-flex align-items-center">
                                                    <button type="button" class="btn btn-danger remove-charge w-100 mb-5">Remove</button>
                                                </div>
                                            </div>
                                                    `;
        $('#rentChargesContainer').append(newEntryHtml);
    });


    document.addEventListener('click', function (event) {
        if (event.target.classList.contains('remove-charge')) {
            event.target.closest('.rent-charge-entry').remove();
        } else if (event.target.classList.contains('btn-remove-row')) {
            event.target.closest('.security-deposit-entry').remove();
        }
    });


    $('#yesSecurityFund').click(function () {
        $(this).addClass('selected');
        $('#noSecurityFund').removeClass('selected');
        $('#additionalDataSection').show();
    });

    // Click event handler for the "No" card to hide the security deposits section
    $('#noSecurityFund').click(function () {
        $(this).addClass('selected');
        $('#yesSecurityFund').removeClass('selected');
        $('#additionalDataSection').hide();
    });





    function submitLeaseForm() {    
        var tenantId = localStorage.getItem('selectedTenantId') || $('#selectedTenantId').val();
        var appTenantId = localStorage.getItem('userId');

        var selectedPropertyText = isEditMode ? $("#selectedPropertyDisplay").val() : $("#propertyDropdown option:selected").text()
        var selectedUnitText = isEditMode ? $("#selectedUnitDisplay").val() : $("#unitDropdown option:selected").text()

        var leaseId = $('#leaseId').val();
        //var isEditMode = leaseId && leaseId > 0;
        var url = isEditMode ? '/Lease/Update/' : '/Lease/Create';
        var formData = new FormData(document.getElementById('multiStepForm'));
        formData.append('LeaseId', leaseId);
        formData.append('TenantIdValue', tenantId);
        formData.append('AppTenantId', appTenantId);
        formData.append('StartDate', $('#startDate').val());
        formData.append('EndDate', $('#endDate').val());
        formData.append('IsSigned', $('#Signed').hasClass('selected') ? 'true' : 'false');
        formData.append('IsFixedTerm', $('#fixedTermCard').hasClass('selected') ? 'true' : 'false');
        formData.append('IsMonthToMonth', $('#monthToMonthCard').hasClass('selected') ? 'true' : 'false');
        formData.append('HasSecurityDeposit', $('#yesSecurityFund').hasClass('selected') ? 'true' : 'false');
        formData.append('LateFeesPolicy', $('#yesLateFees').hasClass('selected') ? 'true' : 'false');
        formData.append("SelectedProperty", selectedPropertyText);
        formData.append("PropertyId", $('#propertyDropdown').val());
        formData.append("UnitId", $('#unitDropdown').val());
        formData.append("SelectedUnit", selectedUnitText);
        if (globalTenantId > 0) {
            // This is the edit scenario, append TenantId to formData
            formData.append('TenantId', globalTenantId);
        }


        // Append Rent Charges and Security Deposits
        appendRentChargesToFormData(formData);
        appendSecurityDepositsToFormData(formData);
        appendFeeChargesToFormData(formData);

        // Handle signature data and submit form data after signature is processed
        appendSignatureData(formData, function (updatedFormData) {
            sendAjaxRequest(url, updatedFormData);
        });
    }

    function appendRentChargesToFormData(formData) {
        $('#rentChargesContainer .rent-charge-entry').each(function (index) {
            var description = $(this).find('[name$=".Description"]').val();
            var amount = $(this).find('[name$=".Amount"]').val();
            var rentDate = $(this).find('[name$=".RentDate"]').val();


            formData.append(`RentCharges[${index}].Description`, description);
            formData.append(`RentCharges[${index}].Amount`, amount);
            formData.append(`RentCharges[${index}].RentDate`, rentDate);

            // Assuming RentPeriod is correctly captured, append it as well
            var rentPeriod = $(this).find('[name$=".RentPeriod"]').val();
            formData.append(`RentCharges[${index}].RentPeriod`, rentPeriod);
        });
    }


    function appendSecurityDepositsToFormData(formData) {
        $('#securityDepositsContainer .deposit-detail').each(function (index) {
            // Utilize the name attribute structure you've established
            formData.append(`SecurityDeposits[${index}].Description`, $(this).find('[name$=".Description"]').val());
            formData.append(`SecurityDeposits[${index}].Amount`, $(this).find('[name$=".Amount"]').val());
        });
    }

    function appendSignatureData(formData, callback) {
        if ($('#Signed').hasClass('selected')) {
            var fileInput = document.getElementById('signatureImageUpload');
            if (fileInput.files.length > 0) {
                var file = fileInput.files[0];
                convertFileToBase64(file, function (base64String) {
                    formData.append('SignatureImagePath', base64String);
                    callback(formData);
                });
            }
        } else if ($('#UnSigned').hasClass('selected') && !signaturePad.isEmpty()) {
            var signatureData = signaturePad.toDataURL();
            formData.append('SignatureImagePath', signatureData);
            callback(formData);
        } else {
            callback(formData);
        }
    }


    function convertFileToBase64(file, callback) {
        var reader = new FileReader();
        reader.onload = function (e) {
            callback(e.target.result);
        };
        reader.readAsDataURL(file);
    }


    function sendAjaxRequest(url, formData) {
        $.ajax({
            url: url,
            type: 'POST',
            processData: false,
            contentType: false,
            data: formData,
            success: function (response) {
                Swal.fire('Success', 'Lease successfully saved.', 'success').then(function () {
                    window.location.href = '/Lease/Index';
                });
            },
            error: function (xhr, status, error) {
                Toast.fire({ icon: 'error', title: 'An error occurred: ' + error });
            }
        });
    }


    document.addEventListener('DOMContentLoaded', function () {
        // Set selected value for Property based on data-selected-property attribute
        document.querySelectorAll('select[data-selected-property]').forEach(function (selectElement) {
            var selectedProperty = selectElement.getAttribute('data-selected-property');
            if (selectedProperty) {
                selectElement.value = selectedProperty;
            }
        });

        // Set selected value for Unit based on data-selected-unit attribute
        document.querySelectorAll('select[data-selected-unit]').forEach(function (selectElement) {
            var selectedUnit = selectElement.getAttribute('data-selected-unit');
            if (selectedUnit) {
                selectElement.value = selectedUnit;
            }
        });
    });


    function populateFeeCharges() {
        $("#feeChargesContainer").html("");
        Model.FeeCharges.forEach(function (charge, index) {
            addFeeChargeEntry(charge.Amount, charge.Description, charge.FeeDate, index);
        });
    }

    function addFeeChargeEntry(amount, description, feeDate, index) {
        const formattedFeeDate = new Date(feeDate).toISOString().split('T')[0];
        const entryHtml = `
                                                <div class="fee-charge-entry fee-charge-entry-inline d-flex flex-row align-items-end mb-5" data-index="${index}">
                                                    <div class="col">
                                                        <input type="text" class="form-control" name="FeeCharges[${index}].Description" placeholder="Description" value="${description}">
                                                    </div>
                                                    <div class="col">
                                                        <input type="number" class="form-control" name="FeeCharges[${index}].Amount" placeholder="Amount" value="${amount}">
                                                    </div>
                                                    <div class="col">
                                                        <input type="date" class="form-control fee-date" name="FeeCharges[${index}].FeeDate" value="${formattedFeeDate}">
                                                    </div>
                                                </div>
                                            `;
        $("#feeChargesContainer").append(entryHtml);
    }

    $('#addAnotherFee').on('click', function () {
        let index = $('#feeChargesContainer .fee-charge-entry').length;
        const today = new Date().toISOString().split('T')[0];
        addFeeChargeEntry('', '', today, index);
    });





    // Ensure your model's data is correctly formatted and available for the JavaScript
    var feeCharges = @Html.Raw(Json.Serialize(Model?.FeeCharges)) || [];

    function populateFeeCharges() {
        $("#feeChargesContainer").empty(); // Clears existing entries
        feeCharges.forEach(function (charge, index) {
            addFeeChargeEntry(charge.Amount, charge.Description, charge.FeeDate, charge.FeePeriod, index);
        });
    }

    function appendFeeChargesToFormData(formData) {
        $('#feeChargesContainer .fee-charge-entry').each(function (index) {
            var description = $(this).find('[name$=".Description"]').val();
            var amount = $(this).find('[name$=".Amount"]').val();
            var feeDate = $(this).find('[name$=".FeeDate"]').val();
            var feePeriod = $(this).find('[name$=".FeePeriod"]').val();

            formData.append(`FeeCharges[${index}].Description`, description);
            formData.append(`FeeCharges[${index}].Amount`, amount);
            formData.append(`FeeCharges[${index}].FeeDate`, feeDate);
            formData.append(`FeeCharges[${index}].FeePeriod`, feePeriod);
        });
    }


    function loadTenants(selectedTenantId = null) {

        if (!userId) {
            console.error("User ID is not available. Please ensure the user is logged in.");
            return;
        }

        $.ajax({
            url: '/Tenant/GetAllTenants',
            method: 'GET',
            success: function (tenants) {
                var tbody = $('#tenantList tbody');
                tbody.empty();
                tenants = tenants.filter(tenant => tenant.AppTid === userId);
                tenants.forEach(function (tenant) {
                    var isSelected = tenant.TenantId.toString() === selectedTenantId;
                    var row = `<tr class="tenant-row ${isSelected ? 'selected' : ''}" data-id="${tenant.TenantId}">
                                       <td>${tenant.FirstName}</td>
                                       <td>${tenant.LastName}</td>
                                       <td>${tenant.EmailAddress}</td>
                                           <td>${tenant.PhoneNumber}</td>
                                       <td><input type="checkbox" class="select-tenant-checkbox" ${isSelected ? 'checked' : ''}></td>
                                   </tr>`;
                    tbody.append(row);
                });
                if (selectedTenantId) {
                    updateSelectedTenantDetails(); // This function call ensures the selected details are shown
                }
            },
            error: function () {
                console.error('Failed to load tenants');
            }
        });
    }

    function updateSelectedTenantDetails() {
        var selectedCheckbox = $('#tenantList .select-tenant-checkbox:checked');
        if (selectedCheckbox.length > 0) {
            var selectedRow = selectedCheckbox.closest('tr');
            var selectedTbody = $('#selectedTenant tbody');
            selectedTbody.empty();
            $("#selectedTenantId").val(selectedRow.attr('data-id'))
            var rowHtml = `<tr>
                                   <td>Selected</td>
                                   <td>${selectedRow.find('td:eq(0)').text()}</td>
                                   <td>${selectedRow.find('td:eq(1)').text()}</td>
                                   <td>${selectedRow.find('td:eq(2)').text()}</td>
                                   <td>${selectedRow.find('td:eq(3)').text()}</td>
                               </tr>`;
            selectedTbody.append(rowHtml);
        }
    }

    $('#tenantList').on('change', '.select-tenant-checkbox', function () {
        $('.select-tenant-checkbox').not(this).prop('checked', false);
        updateSelectedTenantDetails();
    });




    function populateFeeCharges() {

        $("#feeChargesContainer").empty();

        var feeCharges = @Html.Raw(Json.Serialize(Model?.FeeCharges)) || [];
        feeCharges.forEach(function (charge, index) {
            addFeeChargeEntry(charge.Amount, charge.Description, charge.FeeDate, index);
        });
    }

    function addFeeChargeEntry(amount, description, feeDate, index) {
        const formattedFeeDate = new Date(feeDate).toISOString().split('T')[0];
        const entryHtml = `
                    <div class="fee-charge-entry fee-charge-entry-inline d-flex flex-row align-items-end mb-5" data-index="${index}">
                        <div class="col">
                            <input type="text" class="form-control" name="FeeCharges[${index}].Description" placeholder="Description" value="${description}">
                        </div>
                        <div class="col">
                            <input type="number" class="form-control" name="FeeCharges[${index}].Amount" placeholder="Amount" value="${amount}">
                        </div>
                        <div class="col">
                            <input type="date" class="form-control fee-date" name="FeeCharges[${index}].FeeDate" value="${formattedFeeDate}">
                        </div>
                    </div>
                `;
        $("#feeChargesContainer").append(entryHtml);
    }
</script>

