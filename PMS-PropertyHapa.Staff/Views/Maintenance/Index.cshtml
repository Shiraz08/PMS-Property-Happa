
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.25/css/dataTables.bootstrap5.min.css">

<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-12 col-sm-6">
                    <h3>Maintenance</h3>
                </div>
                <div class="col-12 col-sm-6">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/Home/Index"><i data-feather="home"></i></a></li>
                        <li class="breadcrumb-item">Maintenance</li>
                        <li class="breadcrumb-item active">List</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid my-4">
        <div class="row">
            <!-- Column 1: Properties Table (80% on lg screens) -->
            <div class="col-xl-12 col-md-12 box-col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        
                    </div>

                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table display" id="maintenanceTasksTable">
                                <thead>
                                    <tr>
                                        <th scope="col" class="text-center tableHeaderbg">Task</th>
                                        <th scope="col" class="text-center tableHeaderbg">Due at</th>
                                        <th scope="col" class="text-center tableHeaderbg">Related To</th>
                                        <th scope="col" class="text-center tableHeaderbg">Total Amount</th>
                                        <th scope="col" class="text-center tableHeaderbg">Status</th>
                                        <th scope="col" class="text-center tableHeaderbg">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="statusChangeModal" tabindex="-1" aria-labelledby="statusChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="statusChangeForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="statusChangeModalLabel">Change Task Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="taskRequestIdInput" name="TaskRequestId">
                    <input type="hidden" id="currentStatusInput" name="Status">
                <div class="d-none" id="completedDiv">
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountName">Account Name</label>
                                    <input type="text" class="form-control" placeholder="Account Name" id="accountName">
                                </div>
                            </div>
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountHolder">Account Holder</label>
                                    <input type="text" class="form-control" placeholder="Account holder's Name" id="accountHolder">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountIBAN">Account IBAN</label>
                                    <input type="text" class="form-control" placeholder="Account IBAN" id="accountIBAN">
                                </div>
                            </div>
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountSwift">Account Swift/BIC</label>
                                    <input type="text" class="form-control" placeholder="Account Swift/BIC" id="accountSwift">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountBank">Account Bank</label>
                                    <input type="text" class="form-control" placeholder="Bank Name" id="accountBank">
                                </div>
                            </div>
                            <div class="col">
                                <div class="mb-3">
                                    <label for="accountCurrency">Account Currency</label>
                                    <input type="text" class="form-control" placeholder="Currency" id="accountCurrency">
                                </div>
                            </div>
                        </div>
                    <div class="mb-3">
                        <label for="documentFile" class="form-label">Document Upload</label>
                        <input type="file" class="form-control" id="documentFile" name="documentFile" />
                    </div>
                </div>
                    <div class="mb-3">
                        <label for="remarksTextArea" class="form-label">Remarks</label>
                        <textarea class="form-control" id="remarksTextArea" name="Remarks" required rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success" id="saveStatusChangeBtn">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="taskRequestHistoryModal" tabindex="-1" role="dialog" aria-labelledby="taskRequestHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskRequestHistoryModalLabel">Task Request History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table id="taskRequestHistoryTable" class="display" style="width:100%">
                    <thead>
                        <tr>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="taskLineItemsModal" tabindex="-1" role="dialog" aria-labelledby="taskLineItemsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskLineItemsModalLabel">Task Request Line Items</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table id="taskLineItemsTbl" class="display" style="width:100%">
                    <thead>
                        <tr>
                            <th>Memo</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total Amount</th>
                            <th>Account</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/dataTables.bootstrap5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.0.0/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.0.0/js/buttons.bootstrap5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.0.0/js/buttons.html5.min.js"></script>
 <script>
    $(document).ready(function () {
        $('#maintenanceTasksTable').DataTable({
            "ajax": {
                "url": "/Maintenance/GetMaintenanceTasks",
                "type": "GET",
                "dataSrc": "",
                "error": function (xhr, error, code) {
                    console.log("AJAX error in request: " + JSON.stringify(xhr, null, 2));
                }
            },
            "columns": [
                {
                    "data": "TaskRequestId",
                    "className": "text-left",
                    "render": function (data, type, row, meta) {
                        return `
                        <a class="contact-tab-${row.TaskRequestId} nav-link" id="v-pills-${row.TaskRequestId}-tab" data-bs-toggle="pill" onclick="activeDivforowner(${row.TaskRequestId})" href="#v-pills-${row.TaskRequestId}" role="tab" aria-controls="v-pills-${row.TaskRequestId}" aria-selected="true">
                            <div class="media align-items-center">
                                <img class="img-50 img-fluid m-r-20 rounded-circle update_img_0" src="${row.TaskRequestFile ? row.TaskRequestFile : 'data:image/jpeg'}" alt="Sample Image">
                                <div class="media-body">
                                    <div class="email-item">
                                        <div class="typeRow" style="color: green; font-weight: bold;">${row.Type}</div>
                                        <h6 class="subjectRow" style="margin-top: 5px;">${row.Subject}</h6>
                                        <p class="email_add_0" style="width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">${row.Description}</p>
                                    </div>
                                </div>
                            </div>
                        </a>
                        `;
                    }
                },
                {
                    "data": "DueDate",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        return data ? new Date(data).toISOString().split('T')[0] : '';
                    }
                },
                {
                    "data": "Asset",
                    "className": "text-center"
                },
                {
                    "data": "LineItems",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        const totalAmount = data.reduce((sum, item) => sum + (item.Price * item.Quantity), 0);
                        return `<h3>$${totalAmount.toFixed(2)}</h3>`;
                    }
                },
                {
                    "data": "Status",
                    "className": "text-center"
                },
                {
                    "data": "TaskRequestId",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        return `
            <div class="dropdown-basic">
                <div class="dropdown">
                    <div class="btn-group mb-0">
                        <button class="dropbtn btn btn-success" type="button">Action <span><i class="icofont icofont-arrow-down"></i></span></button>
                        <div class="dropdown-content">
                            ${row.Type == "WorkOrderRequest" ? `
                            <a class="info-button btn-secondary" onclick="showTaskLineItems(${JSON.stringify(row.LineItems)})">
                                <i class="fa fa-info-circle"></i> <span class="button-text">Details</span>
                            </a>
                            ` : ""}
                            <a class="btn btn-secondary" onclick="showTaskRequestHistory(${data})">
                                <i class="fa fa-eye"></i> History
                            </a>
                                <div class="dropdown-divider"></div>
                            <div class="dropdown-item">
                                <label for="taskStatus-${row.TaskRequestId}" class="form-label">Change Status:</label>
                                <select class="form-select task-status-dropdown" data-task-request-id="${row.TaskRequestId}" data-original-value="${row.Status}" id="taskStatus-${row.TaskRequestId}" required>
                                    <option value="" disabled>Select Status</option>
                                    <option value="NotStarted" ${row.Status == "NotStarted" ? "selected" : ""}>Not Started</option>
                                    <option value="InProgress" ${row.Status == "InProgress" ? "selected" : ""}>In Progress</option>
                                    <option value="Completed" ${row.Status == "Completed" ? "selected" : ""}>Completed</option>
                                    <option value="OnHold" ${row.Status == "OnHold" ? "selected" : ""}>On Hold</option>
                                </select>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            `;
                    }
                }
            ]
        });


        // Change event for task status dropdown
        $(document).on('change', '.task-status-dropdown', function () {
            var $this = $(this);
            var taskRequestId = $this.data('task-request-id');
            var currentStatus = $this.val();

            if (currentStatus === 'Completed') {
                $("#completedDiv").removeClass("d-none");
            } else {
                $("#completedDiv").addClass("d-none");
            }

            if (!$this.data('original-value')) {
                $this.data('original-value', $this.find('option:selected').val());
            }

            // Example of how to access modal inputs if you're using Bootstrap Modal
            $('#taskRequestIdInput').val(taskRequestId);
            $('#currentStatusInput').val(currentStatus);
            $('#statusChangeModal').modal('show');
        });

        // Function to read file as base64
        function readFileAsBase64(file) {
            return new Promise((resolve, reject) => {
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        resolve(e.target.result); // Resolve with base64 string
                    };
                    reader.onerror = reject;
                    reader.readAsDataURL(file);
                } else {
                    resolve(null); // No file provided
                }
            });
        }

        // $('#saveStatusChangeBtn').click(function () {
        //     var taskRequestId = $('#taskRequestIdInput').val();
        //     var currentStatus = $('#currentStatusInput').val();
        //     var remarks = $('#remarksTextArea').val();
        //      var expense = $('#maintenanceExpense').val();
        //     var documentFile = $('#documentFile')[0].files[0];
 
        //     readFileAsBase64(documentFile).then(function (base64Document) {
        //         var data = {
        //             TaskRequestId: taskRequestId,
        //             Status: currentStatus,
        //             Remarks: remarks,
        //             DocumentFile: base64Document, Include the base64 string
        //             Expense: expense, 
        //             Date: new Date().toISOString()
        //         };

        //         $.ajax({
        //             url: '@Url.Action("SaveTaskHistory", "Maintenance")',
        //             type: 'POST',
        //             data: JSON.stringify(data),
        //             contentType: 'application/json',
        //             beforeSend: function () {
        //                 $('#saveStatusChangeBtn').prop('disabled', true).text('Saving...');
        //             },
        //             success: function (response) {
        //                 $('#statusChangeModal').modal('hide');
        //                 location.reload();
        //             },
        //             error: function (xhr, status, error) {
        //                 console.error('Error:', error);
        //                 alert('Failed to save data');
        //             },
        //             complete: function () {
        //                 $('#saveStatusChangeBtn').prop('disabled', false).text('Save');
        //             }
        //         });
        //     }).catch(function (error) {
        //         console.error('Error reading file:', error);
        //         alert('Failed to read document file');
        //     });
        // });

        // $('#saveStatusChangeBtn').click(function () {

        //     var taskRequestId = $('#taskRequestIdInput').val();
        //     var currentStatus = $('#currentStatusInput').val();
        //     var remarks = $('#remarksTextArea').val();

        //     var data = {
        //         TaskRequestId: taskRequestId,
        //         Status: currentStatus,
        //         Remarks: remarks,
        //         Date: new Date().toISOString()
        //     };

        //     $.ajax({
        //         url: '@Url.Action("SaveTaskHistory", "Maintenance")',
        //         type: 'POST',
        //         data: JSON.stringify(data),
        //         contentType: 'application/json',
        //         beforeSend: function () {
        //             $('#saveStatusChangeBtn').prop('disabled', true).text('Saving...');
        //         },
        //         success: function (response) {
        //             $('#statusChangeModal').modal('hide');
        //             location.reload();
        //         },
        //         error: function (xhr, status, error) {
        //             console.error('Error:', error);
        //             alert('Failed to save data');
        //         },
        //         complete: function () {
        //             $('#saveStatusChangeBtn').prop('disabled', false).text('Save');
        //         }
        //     });
        // });
        $('#statusChangeForm').submit(function (event) {
        event.preventDefault(); // Prevent the default form submission

        var taskRequestId = $('#taskRequestIdInput').val();
        var currentStatus = $('#currentStatusInput').val();
        var accountName = $('#accountName').val();
        var accountHolder = $('#accountHolder').val();
        var accountIBAN = $('#accountIBAN').val();
        var accountSwift = $('#accountSwift').val();
        var accountBank = $('#accountBank').val();
        var accountCurrency = $('#accountCurrency').val();
        var documentFile = $('#documentFile')[0].files[0];
        var remarks = $('#remarksTextArea').val();

         readFileAsBase64(documentFile).then(function (base64Document) {
            var data = {
                TaskRequestId: taskRequestId,
                Status: currentStatus,
                AccountName: accountName,
                AccountHolder: accountHolder,
                AccountIBAN: accountIBAN,
                AccountSwift: accountSwift,
                AccountBank: accountBank,
                AccountCurrency: accountCurrency,
                DocumentFile: base64Document,
                Remarks: remarks,
                Date: new Date().toISOString()
            };

            $.ajax({
                url: '@Url.Action("SaveTaskHistory", "Maintenance")',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json',
                beforeSend: function () {
                    $('#saveStatusChangeBtn').prop('disabled', true).text('Saving...');
                },
                success: function (response) {
                    $('#statusChangeModal').modal('hide');
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    alert('Failed to save data');
                },
                complete: function () {
                    $('#saveStatusChangeBtn').prop('disabled', false).text('Save');
                }
            });
        });
    });

        $('#statusChangeModal').on('hidden.bs.modal', function () {
            var taskRequestId = $('#taskRequestIdInput').val();
            var originalValue = $('#taskStatus-' + taskRequestId).data('original-value');

            if (!$('#saveStatusChangeBtn').prop('disabled')) {
                $('#taskStatus-' + taskRequestId).val(originalValue);
            }
            resetModal();
        });
    });

    function resetModal() {
        $('#taskRequestIdInput').val('');
        $('#currentStatusInput').val('');
        $('#accountName').val();
        $('#accountHolder').val();
        $('#accountIBAN').val();
        $('#accountSwift').val();
        $('#accountBank').val();
        $('#accountCurrency').val();
        $('#documentFile').val();
        $('#remarksTextArea').val('');
@*         $('#documentFile').val('');
        $('#maintenanceExpense').val(''); *@
        @* $('#completedDiv').addClass('d-none');
 *@    }


    function showTaskRequestHistory(taskRequestId) {
        $.ajax({
            url: '@Url.Action("GetTaskRequestHistory", "Maintenance")',
            type: 'POST',
            data: { taskRequestId: taskRequestId },
            success: function (res) {
                if ($.fn.DataTable.isDataTable('#taskRequestHistoryTable')) {
                    $('#taskRequestHistoryTable').DataTable().destroy();
                }

                $('#taskRequestHistoryTable tbody').empty();
                res.forEach(function (item) {
                    $('#taskRequestHistoryTable tbody').append(
                        '<tr>' +
                        '<td>' + item.Status + '</td>' +
                        '<td>' + moment(item.Date).format('MM/DD/YYYY hh:mm A') + '</td>' +
                        '<td>' + item.Remarks + '</td>' +
                        '</tr>'
                    );
                });

                $('#taskRequestHistoryTable').DataTable();
                $('#taskRequestHistoryModal').modal('show');
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
                alert('Failed to retrieve data');
            },
        });
    }


    function showTaskLineItems(lineItems) {
        if ($.fn.DataTable.isDataTable('#taskLineItemsTbl')) {
            $('#taskLineItemsTbl').DataTable().destroy();
        }

        $('#taskLineItemsTbl tbody').empty();

        lineItems.forEach(function (item) {
            var totalAmount = item.Price * item.Quantity;
            $('#taskLineItemsTbl tbody').append(
                '<tr>' +
                '<td>' + item.Memo + '</td>' +
                '<td>' + item.Quantity + '</td>' +
                '<td>' + item.Price + '</td>' +
                '<td>' + totalAmount + '</td>' +
                '<td>' + item.Account + '</td>' +
                '</tr>'
            );
        });

        $('#taskLineItemsTbl').DataTable();

        // Show the modal
        $('#taskLineItemsModal').modal('show');
    }


    // function showTaskLineItems(lineItems) {
    //     if ($.fn.DataTable.isDataTable('#taskLineItemsTbl')) {
    //         $('#taskLineItemsTbl').DataTable().destroy();
    //     }

    //     $('#taskLineItemsTbl tbody').empty();

    //     lineItems.forEach(function (item) {
    //         var totalAmount = item.Price * item.Quantity;
    //         $('#taskLineItemsTbl tbody').append(
    //             '<tr>' +
    //             '<td>' + item.Memo + '</td>' +
    //             '<td>' + item.Quantity + '</td>' +
    //             '<td>' + item.Price + '</td>' +
    //             '<td>' + totalAmount + '</td>' +
    //             '<td>' + item.Account + '</td>' +
    //             '</tr>'
    //         );
    //     });

    //     // Show the modal
    //     $('#taskLineItemsModal').modal('show');
    // }

</script>

